import os

from django.contrib.auth import get_user_model
from django.core.mail import EmailMultiAlternatives
from django.template.loader import get_template

from rest_framework import generics, status
from rest_framework.exceptions import PermissionDenied
from rest_framework.filters import OrderingFilter
from rest_framework.generics import GenericAPIView, ListCreateAPIView, RetrieveUpdateDestroyAPIView
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView

from core.pagination import PagePagination
from core.services.banned_words_service import contains_bad_words
from django_filters.rest_framework import DjangoFilterBackend

from apps.car.filter import CarFilter
from apps.car.models import CarPosterModel
from apps.car.serializers import CarPosterSerializer
from apps.user.permissions import IsOwnerOrManagerOrAdmin
from apps.user.serializers import AdminUserUpdateSerializer, UserSerializer

UserModel = get_user_model()

from rest_framework.filters import OrderingFilter

from core.pagination import PagePagination
from django_filters.rest_framework import DjangoFilterBackend

from apps.user.filter import UserFilter  # üîπ –¥–æ–¥–∞–ª–∏ —ñ–º–ø–æ—Ä—Ç


class UserListCreateView(ListCreateAPIView):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é:
    - —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ role, account_type, is_active
    - —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ id, email, role, is_active, account_type
    - –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    """
    queryset = UserModel.objects.all()
    serializer_class = UserSerializer
    permission_classes = [AllowAny]

    # üîπ –¥–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —ñ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
    pagination_class = PagePagination
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    filterset_class = UserFilter
    ordering_fields = ["id", "email", "role", "is_active", "account_type"]
    ordering = ["-id"]


# # 20251028 –û–Ω–æ–≤–ª—é—é —Ü–µ–π –∫–ª–∞—Å, —â–æ–± –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—ñ –±—É–ª–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —ñ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
# class UserListCreateView(ListCreateAPIView):
#     queryset = UserModel.objects.all()
#     serializer_class = UserSerializer
#     permission_classes = [AllowAny]


class BlockUserView(GenericAPIView):
    def get_queryset(self):
        return UserModel.objects.all().exclude(id=self.request.user.id)

    # queryset = UserModel.objects.all()

    def patch(self, *args, **kwargs):
        user = self.get_object()
        if user.is_active:
            user.is_active = False
            user.save()

        serializer = UserSerializer(user)
        return Response(serializer.data, status.HTTP_200_OK)


class UnBlockUserView(GenericAPIView):
    def get_queryset(self):
        return UserModel.objects.exclude(id=self.request.user.id)

    def patch(self, *args, **kwargs):
        user = self.get_object()
        if not user.is_active:
            user.is_active = True
            user.save()

        serializer = UserSerializer(user)
        return Response(serializer.data, status.HTTP_200_OK)


class UserToAdminView(GenericAPIView):
    def get_queryset(self):
        return UserModel.objects.exclude(id=self.request.user.id)

    # queryset = UserModel.objects.all()

    def patch(self, *args, **kwargs):
        user = self.get_object()
        if not user.is_staff:
            user.is_staff = True
            user.save()

        serializer = UserSerializer(user)
        return Response(serializer.data, status.HTTP_200_OK)


class UserBlockAdminView(GenericAPIView):
    def get_queryset(self):
        return UserModel.objects.exclude(id=self.request.user.id)

    # queryset = UserModel.objects.all()

    def patch(self, *args, **kwargs):
        user = self.get_object()
        if user.is_staff:
            user.is_staff = False
            user.save()

        serializer = UserSerializer(user)
        return Response(serializer.data, status.HTTP_200_OK)


class UserToSellerRoleBasicAccountTypeView(GenericAPIView):
    def get_queryset(self):
        return UserModel.objects.all()

    def patch(self, *args, **kwargs):
        user = self.get_object()
        if not user.role == "seller":
            user.role = "seller"
            user.account_type = "basic"
            user.save()

        serializer = UserSerializer(user)
        return Response(serializer.data, status.HTTP_200_OK)


class UserToManagerRoleView(GenericAPIView):
    def get_queryset(self):
        return UserModel.objects.all()

    def patch(self, *args, **kwargs):
        user = self.get_object()
        if not user.role == "manager":
            user.role = "manager"
            user.account_type = ""  # –æ—á–∏—â—É—î–º–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ
            user.save()

        serializer = UserSerializer(user)
        return Response(serializer.data, status.HTTP_200_OK)


class UserToAdminRoleView(GenericAPIView):
    def get_queryset(self):
        return UserModel.objects.all()

    def patch(self, *args, **kwargs):
        user = self.get_object()
        if not user.role == "admin":
            user.role = "admin"
            user.account_type = ""  # –æ—á–∏—â—É—î–º–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ
            user.save()

        serializer = UserSerializer(user)
        return Response(serializer.data, status.HTTP_200_OK)


class UserToBuyerRoleView(GenericAPIView):
    def get_queryset(self):
        return UserModel.objects.all()

    def patch(self, *args, **kwargs):
        user = self.get_object()
        if not user.role == "buyer":
            user.role = "buyer"
            user.account_type = ""  # –æ—á–∏—â—É—î–º–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ
            user.save()

        serializer = UserSerializer(user)
        return Response(serializer.data, status.HTTP_200_OK)


class UserSellerToBasicAccountTypeView(GenericAPIView):
    def get_queryset(self):
        return UserModel.objects.all()

    def patch(self, *args, **kwargs):
        user = self.get_object()
        if user.role == "seller" and not user.account_type == "basic":
            user.account_type = "basic"
            user.save()

        serializer = UserSerializer(user)
        return Response(serializer.data, status.HTTP_200_OK)


class UserSellerToPremiumAccountTypeView(GenericAPIView):
    def get_queryset(self):
        return UserModel.objects.all()

    def patch(self, *args, **kwargs):
        user = self.get_object()
        if user.role == "seller" and not user.account_type == "premium":
            user.account_type = "premium"
            user.save()

        serializer = UserSerializer(user)
        return Response(serializer.data, status.HTTP_200_OK)


class UserAddCarPosterView(generics.ListCreateAPIView):
    """
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∞–≤—Ç–æ.
    –ü—ñ–¥—Ç—Ä–∏–º—É—î:
    - —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–æ status, brand, model
    - —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ price_usd, brand, model, id
    - –∫–∞—Å—Ç–æ–º–Ω—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
    """
    serializer_class = CarPosterSerializer
    permission_classes = [IsAuthenticated]
    pagination_class = PagePagination
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    filterset_class = CarFilter
    ordering_fields = ['id', 'price_usd', 'brand__brand', 'model__model']
    ordering = ['-id']

    def get_queryset(self):
        user_id = self.kwargs.get('pk')
        if self.request.user.id != int(user_id):
            raise PermissionDenied("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–≤—Ç–æ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return CarPosterModel.objects.filter(user_id=user_id)

    def perform_create(self, serializer):
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≤—Ç–æ:
        - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä—é—î —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó –∞–≤—Ç–æ
        - –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
        - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–≥–∞–Ω—ñ —Å–ª–æ–≤–∞
        """
        user_id = self.kwargs.get('pk')
        if self.request.user.id != int(user_id):
            raise PermissionDenied("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ —ñ–º–µ–Ω—ñ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

        user = UserModel.objects.get(pk=user_id)

        # –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
        if user.account_type == 'basic' and user.cars.count() >= 1:
            raise PermissionDenied("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –±–∞–∑–æ–≤–∏–º –∞–∫–∞—É–Ω—Ç–æ–º –º–æ–∂–µ –º–∞—Ç–∏ –ª–∏—à–µ –æ–¥–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")

        instance = serializer.save(user=user)

        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–∏—Å—É –Ω–∞ –ø–æ–≥–∞–Ω—ñ —Å–ª–æ–≤–∞
        if contains_bad_words(instance.description):
            instance.status = 'draft'
            instance.save()

    def create(self, request, *args, **kwargs):
        """
        –ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ–ø–∏—Å—É –∞–≤—Ç–æ
        """
        response = super().create(request, *args, **kwargs)
        instance = CarPosterModel.objects.get(pk=response.data['id'])

        if contains_bad_words(instance.description):
            message = "–û–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É –ª–µ–∫—Å–∏–∫—É. –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '—á–µ—Ä–Ω–µ—Ç–∫–∞'."
        else:
            message = "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ —Ç–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ."

        response.data['message'] = message
        return response


# # 20251011 –ó–º—ñ–Ω—é—é —Ü–µ–π –∫–ª–∞—Å, —â–æ–± –±—É–ª–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
# class UserAddCarPosterView(generics.ListCreateAPIView):
#     serializer_class = CarPosterSerializer
#     permission_classes = [IsAuthenticated]
#     pagination_class = PagePagination  # —Ç–≤–æ—è –∫–∞—Å—Ç–æ–º–Ω–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è
#     filterset_class = CarFilter
#
#     def get_queryset(self):
#         user_id = self.kwargs.get('pk')  # –∞–±–æ —è–∫ —Ç–∏ –Ω–∞–∑–∏–≤–∞—î—à –ø–∞—Ä–∞–º–µ—Ç—Ä —É URL
#         if self.request.user.id != int(user_id):
#             raise PermissionDenied("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–≤—Ç–æ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
#         # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –º–∞—à–∏–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
#         return CarPosterModel.objects.filter(user_id=user_id)
#
#     def perform_create(self, serializer):
#         user_id = self.kwargs.get('pk')
#         if self.request.user.id != int(user_id):
#             raise PermissionDenied("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ —ñ–º–µ–Ω—ñ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
#
#         user = UserModel.objects.get(pk=user_id)
#         if user.account_type == 'basic' and user.cars.count() >= 1:
#             raise PermissionDenied("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –±–∞–∑–æ–≤–∏–º –∞–∫–∞—É–Ω—Ç–æ–º –º–æ–∂–µ –º–∞—Ç–∏ –ª–∏—à–µ –æ–¥–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")
#
#         instance = serializer.save(user=user)
#
#         # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–∏—Å—É –Ω–∞ –ø–æ–≥–∞–Ω—ñ —Å–ª–æ–≤–∞
#         if contains_bad_words(instance.description):
#             instance.status = 'draft'  # –∞–±–æ —è–∫ —Ç–∞–º —Å—Ç–∞—Ç—É—Å —á–æ—Ä–Ω–æ–≤–∏–∫–∞ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è
#             instance.save()
#
#     def create(self, request, *args, **kwargs):
#         response = super().create(request, *args, **kwargs)
#         instance = CarPosterModel.objects.get(pk=response.data['id'])
#         if contains_bad_words(instance.description):
#             message = "–û–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É –ª–µ–∫—Å–∏–∫—É. –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '—á–æ—Ä–Ω–æ–≤–∏–∫'."
#         else:
#             message = "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ —Ç–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ."
#
#         response.data['message'] = message
#         return response


# class UserAddCarPosterView(GenericAPIView):
#     queryset = UserModel.objects.all()
#     permission_classes = [IsAuthenticated]
#     pagination_class = PagePagination  # –ø—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
#
#     def get(self, request, *args, **kwargs):
#         user = self.get_object()
#         if self.request.user != user:
#             raise PermissionDenied("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–≤—Ç–æ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
#
#         cars = user.cars.all()
#
#         # –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é –¥–æ queryset
#         page = self.paginate_queryset(cars)
#         if page is not None:
#             serializer = CarPosterSerializer(page, many=True, context={'request': request})
#             return self.get_paginated_response(serializer.data)
#
#         # —è–∫—â–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å–µ
#         serializer = CarPosterSerializer(cars, many=True, context={'request': request})
#         return Response(serializer.data, status=200)
#
#     # def get(self, request, *args, **kwargs):
#     #     user = self.get_object()
#     #     if self.request.user != user:
#     #         raise PermissionDenied("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–≤—Ç–æ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
#     #
#     #     cars = user.cars.all()  # —Ç—É—Ç —É–∂–µ –≤—Å—ñ –º–∞—à–∏–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
#     #     serializer = CarPosterSerializer(cars, many=True, context={'request': request})
#     #     return Response(serializer.data, status=status.HTTP_200_OK)
#
#
#     def post(self, *args, **kwargs):
#         user = self.get_object()
#         data = self.request.data
#         if user.account_type == 'basic' and user.cars.count() >= 1:
#             raise PermissionDenied("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –±–∞–∑–æ–≤–∏–º –∞–∫–∞—É–Ω—Ç–æ–º –º–æ–∂–µ –º–∞—Ç–∏ –ª–∏—à–µ –æ–¥–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")
#         if self.request.user != user:
#             raise PermissionDenied("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ —ñ–º–µ–Ω—ñ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
#         serializer = CarPosterSerializer(data=data)
#         serializer.is_valid(raise_exception=True)
#         # serializer.save(user=user)
#         # user_serializer = UserSerializer(user)
#         # return Response(user_serializer.data, status.HTTP_201_CREATED)
#         instance = serializer.save(user=user)
#
#         # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –æ–ø–∏—Å—É
#         if contains_bad_words(instance.description):
#             message = "–û–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É –ª–µ–∫—Å–∏–∫—É. –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '—á–æ—Ä–Ω–æ–≤–∏–∫'."
#         else:
#             message = "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ —Ç–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ."
#
#         # user_serializer = UserSerializer(user)
#         # response_data = user_serializer.data
#         # response_data['message'] = message
#         # return Response(response_data, status=status.HTTP_201_CREATED)
#         # –¢—É—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –π–¥–µ –ø—ñ—Å–ª—è –æ–ø–∏—Å—É —é–∑–µ—Ä—ñ —ñ –π–æ–≥–æ —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ.
#
#         car_data = CarPosterSerializer(instance).data
#         car_data['message'] = message
#         return Response(car_data, status=status.HTTP_201_CREATED)
#         # –¢—É—Ç –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–µ –∞–≤—Ç–æ —ñ –≤ –∫—ñ–Ω—Ü—ñ –π–¥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —Ü—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.


class SendEmailTestView(GenericAPIView):
    permission_classes = (AllowAny,)

    def get(self, *args, **kwargs):
        template = get_template('test_email.html')
        html_content = template.render({'name': 'DJANGO'})
        msg = EmailMultiAlternatives(
            subject="Test Email",
            from_email=os.environ.get('EMAIL_HOST_USER'),
            to=['a_smaga@i.ua']
        )
        msg.attach_alternative(html_content, "text/html")
        msg.send()
        return Response({'message': 'Email sent!'}, status.HTTP_200_OK)

# 20251101 –ó–º—ñ–Ω—é—é, —â–æ–± –∞–¥–º—ñ–Ω —ñ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥–ª–∏ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ role, account_type, is_active.
# class UserDetailView(RetrieveUpdateDestroyAPIView):
#     queryset = UserModel.objects.all()
#     serializer_class = UserSerializer
#
#     def get_permissions(self):
#         if self.request.method == 'GET':
#             return [AllowAny()]  # –±—É–¥—å-—Ö—Ç–æ –º–æ–∂–µ –ø–æ–±–∞—á–∏—Ç–∏ —é–∑–µ—Ä–∞
#         return [IsAuthenticated(), IsOwnerOrManagerOrAdmin()]  # —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏ ‚Äî —Ç—ñ–ª—å–∫–∏ –∑ –ø—Ä–∞–≤–∞–º–∏

class UserDetailView(RetrieveUpdateDestroyAPIView):
    queryset = UserModel.objects.all()
    serializer_class = UserSerializer

    def get_permissions(self):
        if self.request.method == 'GET':
            return [AllowAny()]
        return [IsAuthenticated(), IsOwnerOrManagerOrAdmin()]

    def get_serializer_class(self):
        """
        –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ role, account_type —ñ is_active.
        –í–ª–∞—Å–Ω–∏–∫ ‚Äî –ª–∏—à–µ —Å–≤–æ—ó –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ.
        """
        user = self.request.user
        if user.is_authenticated and getattr(user, "role", None) in ["manager", "admin"]:
            return AdminUserUpdateSerializer
        return UserSerializer


class CurrentUserView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        user = request.user
        serializer = UserSerializer(user, context={'request': request})
        return Response(serializer.data, status=200)
