import logging

from rest_framework import serializers

from core.services.banned_words_service import contains_bad_words
from core.services.currency_conversion_utils import apply_currency_conversion
from core.services.email_service import EmailService

from apps.car.models import BannedWordsModel, CarBrandModel, CarModelModel, CarPosterModel
from apps.statistic.services import get_average_prices, get_view_counts
from apps.user.serializers import UserShortSerializer  # üîπ –Ω–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç
from apps.user.utils.access import has_premium_access

logger = logging.getLogger(__name__)


class CarBrandSerializer(serializers.ModelSerializer):
    class Meta:
        model = CarBrandModel
        fields = ("id", 'brand',)


class CarModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = CarModelModel
        fields = ("id", "brand", "model")


class CarPosterSerializer(serializers.ModelSerializer):
    # üîπ –í–∏–≤–æ–¥–∏–º–æ –±—Ä–µ–Ω–¥ —ñ –º–æ–¥–µ–ª—å —É –≤–∏–≥–ª—è–¥—ñ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –æ–±‚Äô—î–∫—Ç—ñ–≤
    brand = CarBrandSerializer(read_only=True)
    model = CarModelSerializer(read_only=True)

    # üîπ –ü—Ä–∏–π–º–∞—î–º–æ brand_id —ñ model_id –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    brand_id = serializers.PrimaryKeyRelatedField(
        queryset=CarBrandModel.objects.all(),
        source='brand',
        write_only=True,
        required=True
    )
    model_id = serializers.PrimaryKeyRelatedField(
        queryset=CarModelModel.objects.all(),
        source='model',
        write_only=True,
        required=True
    )

    user = UserShortSerializer(read_only=True)

    region_average_price = serializers.SerializerMethodField()
    country_average_price = serializers.SerializerMethodField()
    total_views = serializers.SerializerMethodField()
    daily_views = serializers.SerializerMethodField()
    weekly_views = serializers.SerializerMethodField()
    monthly_views = serializers.SerializerMethodField()
    stats_message = serializers.SerializerMethodField()

    class Meta:
        model = CarPosterModel
        fields = (
            'id', 'user',
            'brand', 'brand_id',
            'model', 'model_id',
            'description',
            'original_price', 'original_currency',
            'price_usd', 'price_eur', 'price_uah',
            'exchange_rate_used', 'location', 'status', 'edit_attempts',
            'region_average_price', 'country_average_price',
            'total_views', 'daily_views', 'weekly_views', 'monthly_views',
            'stats_message', 'updated_at', 'created_at'
        )

    # üîß –í–∞–ª—ñ–¥–∞—Ü—ñ—ó
    def validate_original_price(self, value):
        if value <= 0:
            raise serializers.ValidationError('–¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0.')
        return value

    def validate(self, attrs):
        price = attrs.get('original_price')
        currency = attrs.get('original_currency')

        if not price:
            raise serializers.ValidationError("–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –≤–∞–ª—é—Ç—É, —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ü—ñ–Ω—É.")
        if not currency:
            raise serializers.ValidationError("–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É, —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –≤–∞–ª—é—Ç—É.")

        converted = apply_currency_conversion(price, currency)
        attrs.update(converted)
        return attrs

    # üîß –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    def _can_view_stats(self, obj):
        user = self.context['request'].user
        return has_premium_access(user, obj.user)

    def get_stats_message(self, obj):
        if not self._can_view_stats(obj):
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—Ä–µ–º—ñ—É–º-–ø—Ä–æ–¥–∞–≤—Ü—è, –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        return None

    def get_region_average_price(self, obj):
        if self._can_view_stats(obj):
            return get_average_prices(obj)['region_average_price']
        return None

    def get_country_average_price(self, obj):
        if self._can_view_stats(obj):
            return get_average_prices(obj)['country_average_price']  # ü©µ —Ç—É—Ç –±—É–ª–æ –ø–æ–º–∏–ª–∫–æ–≤–æ region_average_price
        return None

    def get_total_views(self, obj):
        if self._can_view_stats(obj):
            return get_view_counts(obj)['total_views']
        return None

    def get_daily_views(self, obj):
        if self._can_view_stats(obj):
            return get_view_counts(obj)['daily_views']
        return None

    def get_weekly_views(self, obj):
        if self._can_view_stats(obj):
            return get_view_counts(obj)['weekly_views']
        return None

    def get_monthly_views(self, obj):
        if self._can_view_stats(obj):
            return get_view_counts(obj)['monthly_views']
        return None

    # üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è
    def create(self, validated_data):
        description = validated_data.get('description', '')

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∑–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        if contains_bad_words(description):
            validated_data['status'] = 'draft'
        else:
            validated_data['status'] = 'active'

        return super().create(validated_data)


    # --- –û–Ω–æ–≤–ª–µ–Ω–Ω—è ---
    def update(self, instance, validated_data):
        description = validated_data.get('description', instance.description)
        instance.description = description

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É –ª–µ–∫—Å–∏–∫—É
        if contains_bad_words(description):
            instance.edit_attempts += 1
            if instance.edit_attempts >= 3:
                instance.status = 'inactive'
                EmailService.manager_email_for_car_poster_edit(car=instance)
            else:
                instance.status = 'draft'
        else:
            instance.status = 'active'
            instance.edit_attempts = 0

        # –¶—ñ–Ω–∞ —Ç–∞ –≤–∞–ª—é—Ç–∞
        if 'original_price' in validated_data:
            instance.original_price = validated_data['original_price']
        if 'original_currency' in validated_data:
            instance.original_currency = validated_data['original_currency']
        if 'original_price' in validated_data and 'original_currency' in validated_data:
            converted = apply_currency_conversion(
                instance.original_price,
                instance.original_currency
            )
            for field, value in converted.items():
                setattr(instance, field, value)

        # –õ–æ–∫–∞—Ü—ñ—è
        if 'location' in validated_data:
            instance.location = validated_data['location']

        # –ë—Ä–µ–Ω–¥/–º–æ–¥–µ–ª—å
        if 'brand' in validated_data:
            instance.brand = validated_data['brand']
        if 'model' in validated_data:
            instance.model = validated_data['model']

        instance.save()
        return instance

# # # 20251015 –î–∞—é –Ω–æ–≤–∏–π –∫–æ–¥ –¥–ª—è update
#     # üîß –û–Ω–æ–≤–ª–µ–Ω–Ω—è
#     def update(self, instance, validated_data):
#         description = validated_data.get('description', instance.description)
#         instance.description = description
#
#         if contains_bad_words(description):
#             instance.edit_attempts += 1
#             if instance.edit_attempts >= 3:
#                 instance.status = 'inactive'
#                 EmailService.manager_email_for_car_poster_edit(car=instance)
#             else:
#                 instance.status = 'draft'
#         else:
#             instance.status = 'active'
#             instance.edit_attempts = 0
#
#         # üîπ –Ø–∫—â–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è —Ü—ñ–Ω–∞ –∞–±–æ –≤–∞–ª—é—Ç–∞ ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ —ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ, —ñ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ –ø–æ–ª—è
#         if 'original_price' in validated_data and 'original_currency' in validated_data:
#             instance.original_price = validated_data['original_price']
#             instance.original_currency = validated_data['original_currency']
#
#             converted = apply_currency_conversion(
#                 instance.original_price,
#                 instance.original_currency
#             )
#             for field, value in converted.items():
#                 setattr(instance, field, value)
#
#         instance.save()
#         return instance


class BannedWordsSerializer(serializers.ModelSerializer):
    class Meta:
        model = BannedWordsModel
        fields = ('id', 'word', 'updated_at', 'created_at')




# import logging
#
# from rest_framework import serializers
#
# from core.services.banned_words_service import contains_bad_words
# from core.services.currency_conversion_utils import apply_currency_conversion
# from core.services.email_service import EmailService
#
# from apps.car.models import BannedWordsModel, CarBrandModel, CarModelModel, CarPosterModel
# from apps.statistic.services import get_average_prices, get_view_counts
# from apps.user.utils.access import has_premium_access
#
# logger = logging.getLogger(__name__)
#
#
# class CarBrandSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = CarBrandModel
#         # fields = ('id', 'brand', 'updated_at', 'created_at')
#         fields = ('brand',)
#
#
# class CarModelSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = CarModelModel
#         # fields = ('id', 'brand', 'model', 'updated_at', 'created_at')
#         fields = ('model',)
#
#
# class CarPosterSerializer(serializers.ModelSerializer):
#     brand = CarBrandSerializer(read_only=True)
#     model = CarModelSerializer(read_only=True)
#     # brand = CarBrandSerializer
#     # model = CarModelSerializer
#     region_average_price = serializers.SerializerMethodField()
#     country_average_price = serializers.SerializerMethodField()
#     total_views = serializers.SerializerMethodField()
#     daily_views = serializers.SerializerMethodField()
#     weekly_views = serializers.SerializerMethodField()
#     monthly_views = serializers.SerializerMethodField()
#     stats_message = serializers.SerializerMethodField()
#
#     class Meta:
#         model = CarPosterModel
#         fields = ('id', 'user', 'brand', 'model', 'description', 'original_price', 'original_currency', 'price_usd',
#                   'price_eur', 'price_uah', 'exchange_rate_used', 'location', 'status', 'edit_attempts',
#                   'region_average_price', 'country_average_price', 'total_views', 'daily_views', 'weekly_views',
#                   'monthly_views', 'stats_message', 'updated_at', 'created_at')
#         # read_only_fields = ['status', 'edit_attempts']  # —â–æ–± –Ω–µ –ø—ñ–¥–º—ñ–Ω—è–ª–∏ –≤—Ä—É—á–Ω—É
#
#     def validate_original_price(self, original_price):
#         if original_price <= 0:
#             raise serializers.ValidationError('Price must be greater than 0.')
#         return original_price
#
#     def validate(self, attrs):
#         price = attrs.get('original_price')
#         currency = attrs.get('original_currency')
#
#         if not price:
#             raise serializers.ValidationError("–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –≤–∞–ª—é—Ç—É, —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ü—ñ–Ω—É.")
#         if not currency:
#             raise serializers.ValidationError("–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É, —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –≤–∞–ª—é—Ç—É.")
#
#         converted = apply_currency_conversion(price, currency)
#         attrs.update(converted)
#         return attrs
#
#     def _can_view_stats(self, obj):
#         user = self.context['request'].user
#         return has_premium_access(user, obj.user)
#
#     def get_stats_message(self, obj):
#         if not self._can_view_stats(obj):
#             return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—Ä–µ–º—ñ—É–º-–ø—Ä–æ–¥–∞–≤—Ü—è –≤–ª–∞—Å–Ω–∏–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
#         return None
#
#     def get_region_average_price(self, obj):
#         if self._can_view_stats(obj):
#             return get_average_prices(obj)['region_average_price']
#         return None
#
#     def get_country_average_price(self, obj):
#         if self._can_view_stats(obj):
#             return get_average_prices(obj)['region_average_price']
#         return None
#
#     def get_total_views(self, obj):
#         if self._can_view_stats(obj):
#             return get_view_counts(obj)['total_views']
#         return None
#
#     def get_daily_views(self, obj):
#         if self._can_view_stats(obj):
#             return get_view_counts(obj)['daily_views']
#         return None
#
#     def get_weekly_views(self, obj):
#         if self._can_view_stats(obj):
#             return get_view_counts(obj)['weekly_views']
#         return None
#
#     def get_monthly_views(self, obj):
#         if self._can_view_stats(obj):
#             return get_view_counts(obj)['monthly_views']
#         return None
#
#     def create(self, validated_data):
#         description = validated_data.get('description', '')
#         if contains_bad_words(description):
#             validated_data['status'] = 'draft'
#             # validated_data['edit_attempts'] = 1
#         else:
#             validated_data['status'] = 'active'
#             # validated_data['edit_attempts'] = 0
#         return super().create(validated_data)
#
#     def update(self, instance, validated_data):
#         # –°–ø–æ—á–∞—Ç–∫—É –æ–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ–ª—è (–≤–∫–ª—é—á–Ω–æ –∑ description)
#         for attr, value in validated_data.items():
#             setattr(instance, attr, value)
#
#         # –¢–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î–º–æ –º–æ–¥–µ—Ä–∞—Ü—ñ—é description
#         description = validated_data.get('description', instance.description)
#
#         if contains_bad_words(description):
#             # –∑–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
#             instance.edit_attempts += 1
#
#             if instance.edit_attempts >= 3:
#                 instance.status = 'inactive'
#                 EmailService.manager_email_for_car_poster_edit(car=instance)
#             else:
#                 instance.status = 'draft'
#
#         else:
#             instance.status = 'active'
#             instance.edit_attempts = 0  # —Å–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ —É—Å–ø—ñ—à–Ω—ñ–π –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
#
#         instance.description = description
#
#         if 'original_price' in validated_data and 'original_currency' in validated_data:
#             converted = apply_currency_conversion(
#                 validated_data['original_price'],
#                 validated_data['original_currency']
#             )
#             instance.price_usd = converted['price_usd']
#             instance.price_eur = converted['price_eur']
#             instance.price_uah = converted['price_uah']
#             instance.exchange_rate_used = converted['exchange_rate_used']
#
#         instance.save()
#         return instance
#
#
# class BannedWordsSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = BannedWordsModel
#         fields = ('id', 'word', 'updated_at', 'created_at')
