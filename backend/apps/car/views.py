from django.db.models import Q

from rest_framework import generics, status
from rest_framework.generics import ListAPIView, ListCreateAPIView, RetrieveUpdateDestroyAPIView
from rest_framework.permissions import AllowAny, IsAdminUser, IsAuthenticated, IsAuthenticatedOrReadOnly
from rest_framework.response import Response

from core.services.banned_words_service import contains_bad_words
from django_filters.rest_framework import DjangoFilterBackend

from apps.car.filter import CarFilter
from apps.car.models import BannedWordsModel, CarBrandModel, CarModelModel, CarPosterModel
from apps.car.serializers import BannedWordsSerializer, CarBrandSerializer, CarModelSerializer, CarPosterSerializer
from apps.statistic.models import CarViewModel
from apps.statistic.services import register_car_view
from apps.user.mixins import ReadOnlyOrManagerAdminMixin
from apps.user.permissions import EditCarPosterPermission


class CarBrandListCreateView(ReadOnlyOrManagerAdminMixin, ListCreateAPIView):
    serializer_class = CarBrandSerializer
    queryset = CarBrandModel.objects.all()
    # filterset_class = CarFilter
    pagination_class = None  # üîë –≤–∏–º–∏–∫–∞—î –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é

class CarBrandRetrieveUpdateDestroyView(ReadOnlyOrManagerAdminMixin, RetrieveUpdateDestroyAPIView):
    serializer_class = CarBrandSerializer
    queryset = CarBrandModel.objects.all()


class CarModelListCreateView(ReadOnlyOrManagerAdminMixin, ListCreateAPIView):
    serializer_class = CarModelSerializer
    queryset = CarModelModel.objects.all()
    # filterset_class = CarFilter
    pagination_class = None  # üîë –≤–∏–º–∏–∫–∞—î –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ["brand"]

class CarModelRetrieveUpdateDestroyView(ReadOnlyOrManagerAdminMixin, RetrieveUpdateDestroyAPIView):
    serializer_class = CarModelSerializer
    queryset = CarModelModel.objects.all()


class CarListCreateView(generics.ListAPIView):
    #—Ç–µ–ø–µ—Ä —Ç—É—Ç —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ cars –º–∏ –Ω–µ –º–æ–∂–µ–º–æ
    serializer_class = CarPosterSerializer
    # queryset = CarPosterModel.objects.all()
    filterset_class = CarFilter
    permission_classes = (AllowAny,)
    # permission_classes = (IsAuthenticated,)

    # –í–∏–≤–æ–¥–∏—Ç—å –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.
    # def get_queryset(self):
    #     return CarPosterModel.objects.filter(status='active')

    def get_queryset(self):
        user = self.request.user

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞—á–∞—Ç—å –≤—Å–µ
        if user.is_authenticated and (
                user.is_staff or getattr(user, 'role', None) in ['manager', 'admin']
        ):
            return CarPosterModel.objects.all()

        # –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö ‚Äî –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω—ñ
        return CarPosterModel.objects.filter(status='active')

    #
    #     # –Ø–∫—â–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚Äî –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    #     if not user.is_authenticated:
    #         return CarPosterModel.objects.filter(status='active')
    #
    #
    #     # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–∞—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ñ + —Å–≤–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    #     return CarPosterModel.objects.filter(
    #         Q(status='active') | Q(user=user)
    #     )

        # return CarPosterModel.objects.filter(
        #     status='active'
        # ) | CarPosterModel.objects.filter(user=user)


    # def get_queryset(self):
    #     user = self.request.user
    #
    #     if user.is_authenticated and (user.is_staff or getattr(user, 'role', None) in ['manager', 'admin']):
    #         return CarPosterModel.objects.all()
    #
    #     if user.is_authenticated:
    #         return CarPosterModel.objects.filter(models.Q(status='active') | models.Q(user=user))
    #
    #     return CarPosterModel.objects.filter(status='active')



class CarRetrieveUpdateDestroyView(RetrieveUpdateDestroyAPIView):
    queryset = CarPosterModel.objects.all()
    serializer_class = CarPosterSerializer
    permission_classes = [EditCarPosterPermission]

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context['request'] = self.request
        return context

    # def retrieve(self, request, *args, **kwargs):
    #     response = super().retrieve(request, *args, **kwargs)
    #
    #     car = self.get_object()
    #
    #     # –ù–µ –∑–∞–ø–∏—Å—É—î–º–æ –ø–µ—Ä–µ–≥–ª—è–¥, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –≤–ª–∞—Å–Ω–∏–∫
    #     if not request.user.is_authenticated or request.user != car.user:
    #         CarViewModel.objects.create(car=car)
    #
    #     return response

    def retrieve(self, request, *args, **kwargs):
        car = self.get_object()
        response = super().retrieve(request, *args, **kwargs)

        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥—É–±–ª—ñ–∫–∞—Ç–∞ —ñ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º –≤–ª–∞—Å–Ω–∏–∫–∞)
        register_car_view(request, car)

        return response

    def update(self, request, *args, **kwargs):
        partial = kwargs.pop('partial', False)
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=partial)
        serializer.is_valid(raise_exception=True)
        instance = serializer.save()

        if contains_bad_words(instance.description):
            if instance.edit_attempts >= 3:
                message = (
                    "–ó–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å —Ç—Ä–∏ —Å–ø—Ä–æ–±–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É. –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É."
                )
            else:
                message = "–û–ø–∏—Å –º—ñ—Å—Ç–∏—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É –ª–µ–∫—Å–∏–∫—É. –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '—á–µ—Ä–Ω–µ—Ç–∫–∞'."
        else:
            message = "–û–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ. –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ."

        response_data = self.get_serializer(instance).data
        response_data['message'] = message

        return Response(response_data, status=status.HTTP_200_OK)


class BannedWordsListCreateView(ListCreateAPIView):
    serializer_class = BannedWordsSerializer
    queryset = BannedWordsModel.objects.all()

class BannedWordsRetrieveUpdateDestroyView(RetrieveUpdateDestroyAPIView):
    serializer_class = BannedWordsSerializer
    queryset = BannedWordsModel.objects.all()