from django.db.models import Q

from rest_framework import generics, status
from rest_framework.filters import OrderingFilter
from rest_framework.generics import ListAPIView, ListCreateAPIView, RetrieveUpdateDestroyAPIView
from rest_framework.permissions import AllowAny, IsAdminUser, IsAuthenticated, IsAuthenticatedOrReadOnly
from rest_framework.response import Response

from core.services.banned_words_service import contains_bad_words
from django_filters.rest_framework import DjangoFilterBackend

from apps.car.filter import CarFilter
from apps.car.models import BannedWordsModel, CarBrandModel, CarModelModel, CarPosterModel
from apps.car.serializers import BannedWordsSerializer, CarBrandSerializer, CarModelSerializer, CarPosterSerializer
from apps.statistic.models import CarViewModel
from apps.statistic.services import register_car_view
from apps.user.mixins import ReadOnlyOrManagerAdminMixin
from apps.user.permissions import EditCarPosterPermission


class CarBrandListCreateView(ReadOnlyOrManagerAdminMixin, ListCreateAPIView):
    serializer_class = CarBrandSerializer
    queryset = CarBrandModel.objects.all()
    # filterset_class = CarFilter
    pagination_class = None  # üîë –≤–∏–º–∏–∫–∞—î –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é


class CarBrandRetrieveUpdateDestroyView(ReadOnlyOrManagerAdminMixin, RetrieveUpdateDestroyAPIView):
    serializer_class = CarBrandSerializer
    queryset = CarBrandModel.objects.all()


class CarModelListCreateView(ReadOnlyOrManagerAdminMixin, ListCreateAPIView):
    serializer_class = CarModelSerializer
    queryset = CarModelModel.objects.all()
    # filterset_class = CarFilter
    pagination_class = None  # üîë –≤–∏–º–∏–∫–∞—î –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ["brand"]


class CarModelRetrieveUpdateDestroyView(ReadOnlyOrManagerAdminMixin, RetrieveUpdateDestroyAPIView):
    serializer_class = CarModelSerializer
    queryset = CarModelModel.objects.all()


class CarListCreateView(generics.ListAPIView):
    serializer_class = CarPosterSerializer
    permission_classes = (AllowAny,)

    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    filterset_class = CarFilter

    # –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–æ–ª—è –¥–ª—è ordering; –¥–ª—è brand/model ‚Äî –≤–∫–∞–∑—É—î–º–æ –ø–æ–≤–Ω—ñ —à–ª—è—Ö–æ–≤—ñ –ø–æ–ª—è
    ordering_fields = ['id', 'price_usd', 'brand__brand', 'model__model']
    ordering = ['-id']  # –¥–µ—Ñ–æ–ª—Ç–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è

    def get_queryset(self):
        user = self.request.user
        if user.is_authenticated and (
                user.is_staff or getattr(user, 'role', None) in ['manager', 'admin']
        ):
            return CarPosterModel.objects.all()
        return CarPosterModel.objects.filter(status='active')

# class CarListCreateView(generics.ListAPIView):
#     # —Ç–µ–ø–µ—Ä —Ç—É—Ç —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ cars –º–∏ –Ω–µ –º–æ–∂–µ–º–æ
#     serializer_class = CarPosterSerializer
#     # queryset = CarPosterModel.objects.all()
#     filterset_class = CarFilter
#     permission_classes = (AllowAny,)
#
#     # permission_classes = (IsAuthenticated,)
#
#     def get_queryset(self):
#         user = self.request.user
#
#         # –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞—á–∞—Ç—å –≤—Å–µ
#         if user.is_authenticated and (
#                 user.is_staff or getattr(user, 'role', None) in ['manager', 'admin']
#         ):
#             return CarPosterModel.objects.all()
#
#         # –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö ‚Äî –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω—ñ
#         return CarPosterModel.objects.filter(status='active')


class CarRetrieveUpdateDestroyView(RetrieveUpdateDestroyAPIView):
    queryset = CarPosterModel.objects.all()
    serializer_class = CarPosterSerializer
    permission_classes = [EditCarPosterPermission]

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context['request'] = self.request
        return context

    # def retrieve(self, request, *args, **kwargs):
    #     response = super().retrieve(request, *args, **kwargs)
    #
    #     car = self.get_object()
    #
    #     # –ù–µ –∑–∞–ø–∏—Å—É—î–º–æ –ø–µ—Ä–µ–≥–ª—è–¥, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –≤–ª–∞—Å–Ω–∏–∫
    #     if not request.user.is_authenticated or request.user != car.user:
    #         CarViewModel.objects.create(car=car)
    #
    #     return response

    def retrieve(self, request, *args, **kwargs):
        car = self.get_object()
        response = super().retrieve(request, *args, **kwargs)

        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥—É–±–ª—ñ–∫–∞—Ç–∞ —ñ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º –≤–ª–∞—Å–Ω–∏–∫–∞)
        register_car_view(request, car)

        return response


    def update(self, request, *args, **kwargs):
        partial = kwargs.pop('partial', False)
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=partial)
        serializer.is_valid(raise_exception=True)

        # --- –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ ---
        old_data = {
            'description': instance.description,
            'original_price': instance.original_price,
            'original_currency': instance.original_currency,
            'location': instance.location,
            'brand_id': instance.brand_id,
            'model_id': instance.model_id,
        }

        # --- –û–Ω–æ–≤–ª—é—î–º–æ ---
        instance = serializer.save()

        # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É –ª–µ–∫—Å–∏–∫—É ---
        if contains_bad_words(instance.description):
            if instance.edit_attempts >= 3:
                message = (
                    "‚ö†Ô∏è –û–ø–∏—Å –º—ñ—Å—Ç–∏—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É –ª–µ–∫—Å–∏–∫—É. "
                    "–ó–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è —Ç—Ä–∏ —Å–ø—Ä–æ–±–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ‚Äî –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É."
                    f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {instance.status}."
                )
            else:
                message = (
                    "‚ö†Ô∏è –û–ø–∏—Å –º—ñ—Å—Ç–∏—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É –ª–µ–∫—Å–∏–∫—É. "
                    "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '—á–µ—Ä–Ω–µ—Ç–∫–∞'."
                    f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {instance.status}."
                )
        else:
            # --- –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫—ñ –ø–æ–ª—è –∑–º—ñ–Ω–∏–ª–∏—Å—å ---
            changed_fields = []
            field_names = {
                'description': '–æ–ø–∏—Å',
                'original_price': '—Ü—ñ–Ω–∞',
                'original_currency': '–≤–∞–ª—é—Ç–∞',
                'location': '–ª–æ–∫–∞—Ü—ñ—è',
                'brand_id': '–±—Ä–µ–Ω–¥',
                'model_id': '–º–æ–¥–µ–ª—å',
            }

            for field, old_value in old_data.items():
                new_value = getattr(instance, field)
                if new_value != old_value:
                    changed_fields.append(field_names.get(field, field))

            if changed_fields:
                message = (
                    f"‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ. "
                    f"–ó–º—ñ–Ω–µ–Ω–æ: {', '.join(changed_fields)}. "
                    f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {instance.status}."
                )
            else:
                message = f"‚ÑπÔ∏è –î–∞–Ω—ñ –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ. –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {instance.status}."

        # --- –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å ---
        response_data = self.get_serializer(instance).data
        response_data['message'] = message
        return Response(response_data, status=status.HTTP_200_OK)


# # 20251015 –î–∞—é –Ω–æ–≤–∏–π –∫–æ–¥ –¥–ª—è update
#     def update(self, request, *args, **kwargs):
#         partial = kwargs.pop('partial', False)
#         instance = self.get_object()
#         serializer = self.get_serializer(instance, data=request.data, partial=partial)
#         serializer.is_valid(raise_exception=True)
#         instance = serializer.save()
#
#         if contains_bad_words(instance.description):
#             if instance.edit_attempts >= 3:
#                 message = (
#                     "–ó–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å —Ç—Ä–∏ —Å–ø—Ä–æ–±–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É. –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É."
#                 )
#             else:
#                 message = "–û–ø–∏—Å –º—ñ—Å—Ç–∏—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É –ª–µ–∫—Å–∏–∫—É. –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '—á–µ—Ä–Ω–µ—Ç–∫–∞'."
#         else:
#             message = "–û–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ. –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ."
#
#         response_data = self.get_serializer(instance).data
#         response_data['message'] = message
#
#         return Response(response_data, status=status.HTTP_200_OK)


class BannedWordsListCreateView(ListCreateAPIView):
    serializer_class = BannedWordsSerializer
    queryset = BannedWordsModel.objects.all()


class BannedWordsRetrieveUpdateDestroyView(RetrieveUpdateDestroyAPIView):
    serializer_class = BannedWordsSerializer
    queryset = BannedWordsModel.objects.all()
