import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { carService } from "../services/carService";
import { supportService } from "../services/supportService";
import { useNavigate } from "react-router-dom";

const CreateCarPosterPage = () => {
  const {
    register,
    handleSubmit,
    reset,
    resetField,
    getValues,
    formState: { errors },
  } = useForm();

  const navigate = useNavigate();

  const [brands, setBrands] = useState([]);
  const [models, setModels] = useState([]);
  const [selectedBrand, setSelectedBrand] = useState("");

  // –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const [backendError, setBackendError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);

  // "–Ω–µ–º–∞—î –±—Ä–µ–Ω–¥—É/–º–æ–¥–µ–ª—ñ"
  const [showNewBrand, setShowNewBrand] = useState(false);
  const [showNewModel, setShowNewModel] = useState(false);

  // –ª–æ–∫–∞–ª—å–Ω—ñ —Å—Ç–µ–π—Ç–∏ –¥–ª—è –Ω–æ–≤–∏—Ö –±—Ä–µ–Ω–¥—É/–º–æ–¥–µ–ª—ñ
  const [newBrand, setNewBrand] = useState("");
  const [newModel, setNewModel] = useState("");

  // ‚úÖ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤
  useEffect(() => {
    carService
      .getBrands()
      .then((res) => setBrands(res.data || []))
      .catch((err) => console.error("‚ùå Error fetching brands:", err));
  }, []);

  // ‚úÖ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –±—Ä–µ–Ω–¥—É –ø—ñ–¥—Ç—è–≥—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ
  const handleBrandChange = (brandId) => {
    setSelectedBrand(brandId);
    resetField("model");
    setModels([]);

    if (brandId) {
      carService
        .getModels({ brand: brandId })
        .then((res) => setModels(res.data || []))
        .catch((err) => console.error("‚ùå Error fetching models:", err));
    }
  };

  // ‚úÖ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ support
  const handleReport = async (type) => {
    try {
      setBackendError(null);
      setSuccessMessage(null);

      if (type === "brand") {
        if (!newBrand.trim()) {
          setBackendError({ detail: "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É!" });
          return;
        }

        await supportService.reportMissingBrand({ text: newBrand.trim() });
        setSuccessMessage(`‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –±—Ä–µ–Ω–¥ '${newBrand}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
        setNewBrand("");
        setShowNewBrand(false);
      }

      if (type === "model") {
        if (!newModel.trim()) {
          setBackendError({ detail: "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–¥–µ–ª—ñ!" });
          return;
        }

        await supportService.reportMissingModel({
          brand: selectedBrand,
          text: newModel.trim(),
        });

        const brandObj = brands.find((b) => b.id === parseInt(selectedBrand));
        const brandName = brandObj ? brandObj.brand : `ID ${selectedBrand}`;

        setSuccessMessage(
          `‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—É –º–æ–¥–µ–ª—å '${newModel}' —É –±—Ä–µ–Ω–¥—É '${brandName}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.`
        );
        setNewModel("");
        setShowNewModel(false);
      }
    } catch (err) {
      console.error("‚ùå Error reporting:", err);
      if (err.response?.data) {
        setBackendError(err.response.data);
      } else {
        setBackendError({ detail: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è." });
      }
    }
  };

  // ‚úÖ —Å–∞–±–º—ñ—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
  const onSubmit = async (data) => {
    if (showNewBrand || showNewModel) {
      alert(
        "‚ö† –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º –±—Ä–µ–Ω–¥–æ–º/–º–æ–¥–µ–ª–ª—é. –°–ø–µ—Ä—à—É –ø–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—é."
      );
      return;
    }

    try {
      setBackendError(null);
      setSuccessMessage(null);

      const res = await carService.createCar({
        brand: data.brand,
        model: data.model,
        description: data.description,
        original_price: data.original_price,
        original_currency: data.original_currency,
        location: data.location,
      });

      setSuccessMessage("‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–µ —É—Å–ø—ñ—à–Ω–æ!");
      reset();
      navigate(`/cars/${res.data.id}`);
    } catch (err) {
      console.error("‚ùå Backend error:", err);
      if (err.response?.data) {
        setBackendError(err.response.data);
      } else {
        setBackendError({ detail: "–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞." });
      }
    }
  };

  const inputClass =
    "mt-1 px-3 py-2 rounded bg-gray-800 text-gray-100 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500";

  return (
    <div className="flex justify-center items-center min-h-[80vh]">
      <div className="bg-gray-900 p-8 rounded-xl shadow-lg w-full max-w-lg">
        <h1 className="text-2xl font-bold text-gray-100 mb-6 text-center">
          –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
        </h1>

        {/* ‚úÖ –ë–ª–æ–∫ —É—Å–ø—ñ—Ö—É */}
        {successMessage && (
          <div className="mb-4 p-3 rounded bg-green-800 text-green-200 text-sm relative">
            {successMessage}
            <button
              onClick={() => setSuccessMessage(null)}
              className="absolute top-1 right-2 text-green-200 hover:text-white"
            >
              ‚úñ
            </button>
          </div>
        )}

        {/* ‚úÖ –ë–ª–æ–∫ –ø–æ–º–∏–ª–æ–∫ –∑ –±–µ–∫–µ–Ω–¥—É */}
        {backendError && (
          <div className="mb-4 p-3 rounded bg-red-800 text-red-200 text-sm relative">
            {backendError.detail && <p>‚ö† {backendError.detail}</p>}
            {Object.keys(backendError).map(
              (field) =>
                field !== "detail" && (
                  <p key={field}>
                    ‚ö† {field}: {backendError[field]}
                  </p>
                )
            )}
            <button
              onClick={() => setBackendError(null)}
              className="absolute top-1 right-2 text-red-200 hover:text-white"
            >
              ‚úñ
            </button>
          </div>
        )}

        <form onSubmit={handleSubmit(onSubmit)} className="grid gap-4">
          {/* === –ë—Ä–µ–Ω–¥ === */}
          <label className="flex flex-col text-gray-100">
            –ë—Ä–µ–Ω–¥
            <select
              {...register("brand", { required: !showNewBrand })}
              className={inputClass}
              onChange={(e) => handleBrandChange(e.target.value)}
              disabled={showNewBrand}
            >
              <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ --</option>
              {brands.map((b) => (
                <option key={b.id} value={b.id}>
                  {b.brand}
                </option>
              ))}
            </select>
            {errors.brand && (
              <span className="text-red-500 text-sm">–í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥</span>
            )}
          </label>

          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥—É */}
          <button
            type="button"
            onClick={() => setShowNewBrand((prev) => !prev)}
            className="text-sm text-blue-400 hover:underline self-start"
          >
            {showNewBrand
              ? "‚úñ –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–ª–µ"
              : "üëâ –ù–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –±—Ä–µ–Ω–¥? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç"}
          </button>

          {showNewBrand && (
            <div className="flex gap-2 items-center">
              <input
                type="text"
                value={newBrand}
                onChange={(e) => setNewBrand(e.target.value)}
                className={inputClass + " flex-1"}
                placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –±—Ä–µ–Ω–¥"
              />
              <button
                type="button"
                onClick={() => handleReport("brand")}
                className="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-2 rounded"
              >
                –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏
              </button>
            </div>
          )}

          {/* === –ú–æ–¥–µ–ª—å === */}
          {selectedBrand && !showNewBrand && (
            <>
              <label className="flex flex-col text-gray-100">
                –ú–æ–¥–µ–ª—å
                <select
                  {...register("model", { required: !showNewModel })}
                  className={inputClass}
                  disabled={showNewModel}
                >
                  <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å --</option>
                  {models.map((m) => (
                    <option key={m.id} value={m.id}>
                      {m.model}
                    </option>
                  ))}
                </select>
                {errors.model && (
                  <span className="text-red-500 text-sm">–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å</span>
                )}
              </label>

              <button
                type="button"
                onClick={() => setShowNewModel((prev) => !prev)}
                className="text-sm text-blue-400 hover:underline self-start"
              >
                {showNewModel
                  ? "‚úñ –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–ª–µ"
                  : "üëâ –ù–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –º–æ–¥–µ–ª—å? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç"}
              </button>

              {showNewModel && (
                <div className="flex gap-2 items-center">
                  <input
                    type="text"
                    value={newModel}
                    onChange={(e) => setNewModel(e.target.value)}
                    className={inputClass + " flex-1"}
                    placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–æ–¥–µ–ª—å"
                  />
                  <button
                    type="button"
                    onClick={() => handleReport("model")}
                    className="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-2 rounded"
                  >
                    –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏
                  </button>
                </div>
              )}
            </>
          )}

          {/* === –û–ø–∏—Å === */}
          <label className="flex flex-col text-gray-100">
            –û–ø–∏—Å
            <textarea
              {...register("description", { required: true })}
              className={inputClass}
              rows={4}
            />
            {errors.description && (
              <span className="text-red-500 text-sm">–ü–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ</span>
            )}
          </label>

          {/* === –¶—ñ–Ω–∞ === */}
          <label className="flex flex-col text-gray-100">
            –¶—ñ–Ω–∞
            <input
              type="number"
              step="0.01"
              {...register("original_price", { required: true })}
              className={inputClass}
            />
            {errors.original_price && (
              <span className="text-red-500 text-sm">–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É</span>
            )}
          </label>

          {/* === –í–∞–ª—é—Ç–∞ === */}
          <label className="flex flex-col text-gray-100">
            –í–∞–ª—é—Ç–∞
            <select
              {...register("original_currency", { required: true })}
              className={inputClass}
            >
              <option value="UAH">‚Ç¥ –ì—Ä–∏–≤–Ω—è</option>
              <option value="USD">$ –î–æ–ª–∞—Ä</option>
              <option value="EUR">‚Ç¨ –Ñ–≤—Ä–æ</option>
            </select>
          </label>

          {/* === –õ–æ–∫–∞—Ü—ñ—è === */}
          <label className="flex flex-col text-gray-100">
            –õ–æ–∫–∞—Ü—ñ—è
            <input
              type="text"
              {...register("location", { required: true })}
              className={inputClass}
            />
            {errors.location && (
              <span className="text-red-500 text-sm">–ü–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ</span>
            )}
          </label>

          <button
            type="submit"
            disabled={showNewBrand || showNewModel}
            className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 rounded shadow transition-colors disabled:opacity-50"
          >
            –°—Ç–≤–æ—Ä–∏—Ç–∏
          </button>
        </form>
      </div>
    </div>
  );
};

export { CreateCarPosterPage };




// import React, {useEffect, useState} from "react";
// import {useForm} from "react-hook-form";
// import {carService} from "../services/carService";
// import {useNavigate} from "react-router-dom";
//
// const CreateCarPosterPage = () => {
//     const {
//         register,
//         handleSubmit,
//         reset,
//         resetField,
//         getValues,
//         formState: {errors},
//     } = useForm();
//
//     const navigate = useNavigate();
//
//     const [brands, setBrands] = useState([]);
//     const [models, setModels] = useState([]);
//     const [selectedBrand, setSelectedBrand] = useState("");
//     const [backendError, setBackendError] = useState(null); // ‚úÖ —Å—Ç–∞–Ω –¥–ª—è –ø–æ–º–∏–ª–æ–∫ –∑ –±–µ–∫–µ–Ω–¥—É
//
//     // --- —Å—Ç–∞–Ω–∏ –¥–ª—è "–Ω–µ–º–∞—î –±—Ä–µ–Ω–¥—É/–º–æ–¥–µ–ª—ñ"
//     const [showNewBrand, setShowNewBrand] = useState(false);
//     const [showNewModel, setShowNewModel] = useState(false);
//
//     const handleReport = (type) => {
//         const values = getValues();
//
//         if (type === "brand") {
//             if (!values.newBrand) {
//                 alert("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É!");
//                 return;
//             }
//             carService.reportMissingBrand({brand: values.newBrand});
//             resetField("newBrand");
//             setShowNewBrand(false);
//         }
//
//         if (type === "model") {
//             if (!values.newModel) {
//                 alert("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–¥–µ–ª—ñ!");
//                 return;
//             }
//
//             const brandObj = brands.find((b) => b.id === parseInt(selectedBrand));
//             const brandName = brandObj ? brandObj.brand : `ID ${selectedBrand}`;
//
//             carService.reportMissingModel({
//                 brand: selectedBrand,      // ID –¥–ª—è –±–µ–∫–µ–Ω–¥—É
//                 brand_name: brandName,     // üëà –î–æ–¥–∞—î–º–æ –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É –¥–ª—è alert
//                 model: values.newModel,
//             });
//
//             resetField("newModel");
//             setShowNewModel(false);
//         }
//     };
//
//     // ‚úÖ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤
//     useEffect(() => {
//         carService
//             .getBrands()
//             .then((res) => setBrands(res.data || []))
//             .catch((err) => console.error("‚ùå Error fetching brands:", err));
//     }, []);
//
//     // ‚úÖ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –±—Ä–µ–Ω–¥—É –ø—ñ–¥—Ç—è–≥—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ
//     const handleBrandChange = (brandId) => {
//         setSelectedBrand(brandId);
//         resetField("model");
//         setModels([]);
//
//         if (brandId) {
//             carService
//                 .getModels({brand: brandId})
//                 .then((res) => setModels(res.data || []))
//                 .catch((err) => console.error("‚ùå Error fetching models:", err));
//         }
//     };
//
//     // ‚úÖ —Å–∞–±–º—ñ—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
//     const onSubmit = async (data) => {
//         if (showNewBrand || showNewModel) {
//             alert(
//                 "‚ö† –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º –±—Ä–µ–Ω–¥–æ–º/–º–æ–¥–µ–ª–ª—é. –°–ø–µ—Ä—à—É –ø–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—é."
//             );
//             return;
//         }
//
//         try {
//             setBackendError(null); // –æ—á–∏—â–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ—é —Å–ø—Ä–æ–±–æ—é
//             const res = await carService.createCar({
//                 brand: data.brand,
//                 model: data.model,
//                 description: data.description,
//                 original_price: data.original_price,
//                 original_currency: data.original_currency,
//                 location: data.location,
//             });
//
//             alert("‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–µ —É—Å–ø—ñ—à–Ω–æ!");
//             reset();
//             navigate(`/cars/${res.data.id}`); // ‚úÖ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–æ–≤–µ –∞–≤—Ç–æ
//         } catch (err) {
//             console.error("‚ùå Backend error:", err);
//
//             // ‚úÖ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É
//             if (err.response?.data) {
//                 setBackendError(err.response.data);
//             } else {
//                 setBackendError({detail: "–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞."});
//             }
//         }
//     };
//
//     const inputClass =
//         "mt-1 px-3 py-2 rounded bg-gray-800 text-gray-100 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500";
//
//     return (
//         <div className="flex justify-center items-center min-h-[80vh]">
//             <div className="bg-gray-900 p-8 rounded-xl shadow-lg w-full max-w-lg">
//                 <h1 className="text-2xl font-bold text-gray-100 mb-6 text-center">
//                     –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
//                 </h1>
//
//                 {/* ‚úÖ –ë–ª–æ–∫ –ø–æ–º–∏–ª–æ–∫ –∑ –±–µ–∫–µ–Ω–¥—É */}
//                 {backendError && (
//                     <div className="mb-4 p-3 rounded bg-red-800 text-red-200 text-sm">
//                         {backendError.detail && <p>‚ö† {backendError.detail}</p>}
//                         {Object.keys(backendError).map(
//                             (field) =>
//                                 field !== "detail" && (
//                                     <p key={field}>
//                                         ‚ö† {field}: {backendError[field]}
//                                     </p>
//                                 )
//                         )}
//                     </div>
//                 )}
//
//                 <form onSubmit={handleSubmit(onSubmit)} className="grid gap-4">
//                     {/* === –ë—Ä–µ–Ω–¥ === */}
//                     <label className="flex flex-col text-gray-100">
//                         –ë—Ä–µ–Ω–¥
//                         <select
//                             {...register("brand", {required: !showNewBrand})}
//                             className={inputClass}
//                             onChange={(e) => handleBrandChange(e.target.value)}
//                             disabled={showNewBrand}
//                         >
//                             <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ --</option>
//                             {brands.map((b) => (
//                                 <option key={b.id} value={b.id}>
//                                     {b.brand}
//                                 </option>
//                             ))}
//                         </select>
//                         {errors.brand && (
//                             <span className="text-red-500 text-sm">–í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥</span>
//                         )}
//                     </label>
//
//                     {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥—É */}
//                     <button
//                         type="button"
//                         onClick={() => setShowNewBrand((prev) => !prev)}
//                         className="text-sm text-blue-400 hover:underline self-start"
//                     >
//                         {showNewBrand
//                             ? "‚úñ –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–ª–µ"
//                             : "üëâ –ù–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –±—Ä–µ–Ω–¥? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç"}
//                     </button>
//
//                     {showNewBrand && (
//                         <div className="flex gap-2 items-center">
//                             <input
//                                 type="text"
//                                 {...register("newBrand")}
//                                 className={inputClass + " flex-1"}
//                                 placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –±—Ä–µ–Ω–¥"
//                             />
//                             <button
//                                 type="button"
//                                 onClick={() => handleReport("brand")}
//                                 className="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-2 rounded"
//                             >
//                                 –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏
//                             </button>
//                         </div>
//                     )}
//
//                     {/* === –ú–æ–¥–µ–ª—å === */}
//                     {selectedBrand && !showNewBrand && (
//                         <>
//                             <label className="flex flex-col text-gray-100">
//                                 –ú–æ–¥–µ–ª—å
//                                 <select
//                                     {...register("model", {required: !showNewModel})}
//                                     className={inputClass}
//                                     disabled={showNewModel}
//                                 >
//                                     <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å --</option>
//                                     {models.map((m) => (
//                                         <option key={m.id} value={m.id}>
//                                             {m.model}
//                                         </option>
//                                     ))}
//                                 </select>
//                                 {errors.model && (
//                                     <span className="text-red-500 text-sm">–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å</span>
//                                 )}
//                             </label>
//
//                             <button
//                                 type="button"
//                                 onClick={() => setShowNewModel((prev) => !prev)}
//                                 className="text-sm text-blue-400 hover:underline self-start"
//                             >
//                                 {showNewModel
//                                     ? "‚úñ –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–ª–µ"
//                                     : "üëâ –ù–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –º–æ–¥–µ–ª—å? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç"}
//                             </button>
//
//                             {showNewModel && (
//                                 <div className="flex gap-2 items-center">
//                                     <input
//                                         type="text"
//                                         {...register("newModel")}
//                                         className={inputClass + " flex-1"}
//                                         placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–æ–¥–µ–ª—å"
//                                     />
//                                     <button
//                                         type="button"
//                                         onClick={() => handleReport("model")}
//                                         className="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-2 rounded"
//                                     >
//                                         –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏
//                                     </button>
//                                 </div>
//                             )}
//                         </>
//                     )}
//
//                     {/* === –û–ø–∏—Å === */}
//                     <label className="flex flex-col text-gray-100">
//                         –û–ø–∏—Å
//                         <textarea
//                             {...register("description", {required: true})}
//                             className={inputClass}
//                             rows={4}
//                         />
//                         {errors.description && (
//                             <span className="text-red-500 text-sm">–ü–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ</span>
//                         )}
//                     </label>
//
//                     {/* === –¶—ñ–Ω–∞ === */}
//                     <label className="flex flex-col text-gray-100">
//                         –¶—ñ–Ω–∞
//                         <input
//                             type="number"
//                             step="0.01"
//                             {...register("original_price", {required: true})}
//                             className={inputClass}
//                         />
//                         {errors.original_price && (
//                             <span className="text-red-500 text-sm">–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É</span>
//                         )}
//                     </label>
//
//                     {/* === –í–∞–ª—é—Ç–∞ === */}
//                     <label className="flex flex-col text-gray-100">
//                         –í–∞–ª—é—Ç–∞
//                         <select
//                             {...register("original_currency", {required: true})}
//                             className={inputClass}
//                         >
//                             <option value="UAH">‚Ç¥ –ì—Ä–∏–≤–Ω—è</option>
//                             <option value="USD">$ –î–æ–ª–∞—Ä</option>
//                             <option value="EUR">‚Ç¨ –Ñ–≤—Ä–æ</option>
//                         </select>
//                     </label>
//
//                     {/* === –õ–æ–∫–∞—Ü—ñ—è === */}
//                     <label className="flex flex-col text-gray-100">
//                         –õ–æ–∫–∞—Ü—ñ—è
//                         <input
//                             type="text"
//                             {...register("location", {required: true})}
//                             className={inputClass}
//                         />
//                         {errors.location && (
//                             <span className="text-red-500 text-sm">–ü–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ</span>
//                         )}
//                     </label>
//
//                     <button
//                         type="submit"
//                         disabled={showNewBrand || showNewModel}
//                         className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 rounded shadow transition-colors disabled:opacity-50"
//                     >
//                         –°—Ç–≤–æ—Ä–∏—Ç–∏
//                     </button>
//                 </form>
//             </div>
//         </div>
//     );
// };
//
// export {CreateCarPosterPage};


// import React, {useEffect, useState} from "react";
// import {useForm} from "react-hook-form";
// import {carService} from "../services/carService";
// import {useNavigate} from "react-router-dom";
//
// const CreateCarPosterPage = () => {
//     const {
//         register,
//         handleSubmit,
//         reset,
//         resetField,
//         setValue,
//         getValues,
//         formState: {errors},
//     } = useForm();
//
//     const navigate = useNavigate();
//
//     const [brands, setBrands] = useState([]);
//     const [models, setModels] = useState([]);
//     const [selectedBrand, setSelectedBrand] = useState("");
//
//     // --- —Å—Ç–∞–Ω–∏ –¥–ª—è "–Ω–µ–º–∞—î –±—Ä–µ–Ω–¥—É/–º–æ–¥–µ–ª—ñ"
//     const [showNewBrand, setShowNewBrand] = useState(false);
//     const [showNewModel, setShowNewModel] = useState(false);
//
//     const handleReport = (type) => {
//   const values = getValues();
//
//   if (type === "brand") {
//     if (!values.newBrand) {
//       alert("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É!");
//       return;
//     }
//     carService.reportMissingBrand({ brand: values.newBrand });
//     resetField("newBrand");
//     setShowNewBrand(false);
//   }
//
//   if (type === "model") {
//     if (!values.newModel) {
//       alert("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–¥–µ–ª—ñ!");
//       return;
//     }
//     carService.reportMissingModel({ brand: selectedBrand, model: values.newModel });
//     resetField("newModel");
//     setShowNewModel(false);
//   }
// };
//
//     // ‚úÖ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤
//     useEffect(() => {
//         carService
//             .getBrands()
//             .then((res) => setBrands(res.data || []))
//             .catch((err) => console.error("‚ùå Error fetching brands:", err));
//     }, []);
//
//     // ‚úÖ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –±—Ä–µ–Ω–¥—É –ø—ñ–¥—Ç—è–≥—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ
//     const handleBrandChange = (brandId) => {
//         setSelectedBrand(brandId);
//         resetField("model");
//         setModels([]);
//
//         if (brandId) {
//             carService
//                 .getModels({brand: brandId})
//                 .then((res) => setModels(res.data || []))
//                 .catch((err) => console.error("‚ùå Error fetching models:", err));
//         }
//     };
//
//     // ‚úÖ —Å–∞–±–º—ñ—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
//     const onSubmit = async (data) => {
//         if (showNewBrand || showNewModel) {
//             alert("‚ö† –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º –±—Ä–µ–Ω–¥–æ–º/–º–æ–¥–µ–ª–ª—é. –°–ø–µ—Ä—à—É –ø–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—é.");
//             return;
//         }
//
//         try {
//             await carService.createCar({
//                 brand: data.brand,
//                 model: data.model,
//                 description: data.description,
//                 original_price: data.original_price,
//                 original_currency: data.original_currency,
//                 location: data.location,
//             });
//
//             alert("‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–µ —É—Å–ø—ñ—à–Ω–æ!");
//             reset();
//             navigate("/cars");
//         } catch (e) {
//             console.error(e);
//             alert("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è!");
//         }
//     };
//
//     // ‚úÖ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –±—Ä–µ–Ω–¥
//     const reportBrand = (data) => {
//         if (!data.newBrand) {
//             alert("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É!");
//             return;
//         }
//         carService.reportMissingBrand({brand: data.newBrand});
//         resetField("newBrand");
//         setShowNewBrand(false);
//     };
//
//     // ‚úÖ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—é –º–æ–¥–µ–ª—å
//     const reportModel = (data) => {
//         if (!data.newModel) {
//             alert("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–¥–µ–ª—ñ!");
//             return;
//         }
//         carService.reportMissingModel({brand: selectedBrand, model: data.newModel});
//         resetField("newModel");
//         setShowNewModel(false);
//     };
//
//     const inputClass =
//         "mt-1 px-3 py-2 rounded bg-gray-800 text-gray-100 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500";
//
//     return (
//         <div className="flex justify-center items-center min-h-[80vh]">
//             <div className="bg-gray-900 p-8 rounded-xl shadow-lg w-full max-w-lg">
//                 <h1 className="text-2xl font-bold text-gray-100 mb-6 text-center">
//                     –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
//                 </h1>
//
//                 <form onSubmit={handleSubmit(onSubmit)} className="grid gap-4">
//                     {/* === –ë—Ä–µ–Ω–¥ === */}
//                     <label className="flex flex-col text-gray-100">
//                         –ë—Ä–µ–Ω–¥
//                         <select
//                             {...register("brand", {required: !showNewBrand})}
//                             className={inputClass}
//                             onChange={(e) => handleBrandChange(e.target.value)}
//                             disabled={showNewBrand}
//                         >
//                             <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ --</option>
//                             {brands.map((b) => (
//                                 <option key={b.id} value={b.id}>
//                                     {b.brand}
//                                 </option>
//                             ))}
//                         </select>
//                         {errors.brand && (
//                             <span className="text-red-500 text-sm">–í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥</span>
//                         )}
//                     </label>
//
//                     {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥—É */}
//                     <button
//                         type="button"
//                         onClick={() => setShowNewBrand((prev) => !prev)}
//                         className="text-sm text-blue-400 hover:underline self-start"
//                     >
//                         {showNewBrand
//                             ? "‚úñ –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–ª–µ"
//                             : "üëâ –ù–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –±—Ä–µ–Ω–¥? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç"}
//                     </button>
//
//                     {showNewBrand && (
//                         <div className="flex gap-2 items-center">
//                             <input
//                                 type="text"
//                                 {...register("newBrand")}
//                                 className={inputClass + " flex-1"}
//                                 placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –±—Ä–µ–Ω–¥"
//                             />
//                             <button
//                                 type="button"
//                                 onClick={() => handleReport("brand")}   // ‚úÖ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫
//                                 className="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-2 rounded"
//                             >
//                                 –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏
//                             </button>
//                         </div>
//                     )}
//
//                     {/* === –ú–æ–¥–µ–ª—å === */}
//                     {selectedBrand && !showNewBrand && (
//                         <>
//                             <label className="flex flex-col text-gray-100">
//                                 –ú–æ–¥–µ–ª—å
//                                 <select
//                                     {...register("model", {required: !showNewModel})}
//                                     className={inputClass}
//                                     disabled={showNewModel}
//                                 >
//                                     <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å --</option>
//                                     {models.map((m) => (
//                                         <option key={m.id} value={m.id}>
//                                             {m.model}
//                                         </option>
//                                     ))}
//                                 </select>
//                                 {errors.model && (
//                                     <span className="text-red-500 text-sm">–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å</span>
//                                 )}
//                             </label>
//
//                             <button
//                                 type="button"
//                                 onClick={() => setShowNewModel((prev) => !prev)}
//                                 className="text-sm text-blue-400 hover:underline self-start"
//                             >
//                                 {showNewModel
//                                     ? "‚úñ –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–ª–µ"
//                                     : "üëâ –ù–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –º–æ–¥–µ–ª—å? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç"}
//                             </button>
//
//                             {showNewModel && (
//                                 <div className="flex gap-2 items-center">
//                                     <input
//                                         type="text"
//                                         {...register("newModel")}
//                                         className={inputClass + " flex-1"}
//                                         placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–æ–¥–µ–ª—å"
//                                     />
//                                     <button
//                                         type="button"
//                                         onClick={() => handleReport("model")}   // ‚úÖ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫
//                                         className="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-2 rounded"
//                                     >
//                                         –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏
//                                     </button>
//                                 </div>
//                             )}
//                         </>
//                     )}
//
//                     {/* === –û–ø–∏—Å === */}
//                     <label className="flex flex-col text-gray-100">
//                         –û–ø–∏—Å
//                         <textarea
//                             {...register("description", {required: true})}
//                             className={inputClass}
//                             rows={4}
//                         />
//                         {errors.description && (
//                             <span className="text-red-500 text-sm">–ü–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ</span>
//                         )}
//                     </label>
//
//                     {/* === –¶—ñ–Ω–∞ === */}
//                     <label className="flex flex-col text-gray-100">
//                         –¶—ñ–Ω–∞
//                         <input
//                             type="number"
//                             step="0.01"
//                             {...register("original_price", {required: true})}
//                             className={inputClass}
//                         />
//                         {errors.original_price && (
//                             <span className="text-red-500 text-sm">–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É</span>
//                         )}
//                     </label>
//
//                     {/* === –í–∞–ª—é—Ç–∞ === */}
//                     <label className="flex flex-col text-gray-100">
//                         –í–∞–ª—é—Ç–∞
//                         <select
//                             {...register("original_currency", {required: true})}
//                             className={inputClass}
//                         >
//                             <option value="UAH">‚Ç¥ –ì—Ä–∏–≤–Ω—è</option>
//                             <option value="USD">$ –î–æ–ª–∞—Ä</option>
//                             <option value="EUR">‚Ç¨ –Ñ–≤—Ä–æ</option>
//                         </select>
//                     </label>
//
//                     {/* === –õ–æ–∫–∞—Ü—ñ—è === */}
//                     <label className="flex flex-col text-gray-100">
//                         –õ–æ–∫–∞—Ü—ñ—è
//                         <input
//                             type="text"
//                             {...register("location", {required: true})}
//                             className={inputClass}
//                         />
//                         {errors.location && (
//                             <span className="text-red-500 text-sm">–ü–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ</span>
//                         )}
//                     </label>
//
//                     <button
//                         type="submit"
//                         disabled={showNewBrand || showNewModel}
//                         className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 rounded shadow transition-colors disabled:opacity-50"
//                     >
//                         –°—Ç–≤–æ—Ä–∏—Ç–∏
//                     </button>
//                 </form>
//             </div>
//         </div>
//     );
// };
//
// export {CreateCarPosterPage};


// import React, {useEffect, useState} from "react";
// import {useForm} from "react-hook-form";
// import {carService} from "../services/carService";
// import {useNavigate} from "react-router-dom";
//
// const CreateCarPosterPage = () => {
//     const {
//         register,
//         handleSubmit,
//         reset,
//         resetField,
//         setValue,
//         formState: {errors},
//     } = useForm();
//
//     const navigate = useNavigate();
//
//     const [brands, setBrands] = useState([]);
//     const [models, setModels] = useState([]);
//     const [selectedBrand, setSelectedBrand] = useState("");
//
//     // --- —Å—Ç–∞–Ω–∏ –¥–ª—è "–Ω–µ–º–∞—î –±—Ä–µ–Ω–¥—É/–º–æ–¥–µ–ª—ñ"
//     const [showNewBrand, setShowNewBrand] = useState(false);
//     const [showNewModel, setShowNewModel] = useState(false);
//
//     // ‚úÖ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤
//     useEffect(() => {
//         carService
//             .getBrands()
//             .then((res) => setBrands(res.data || []))
//             // .then((res) => {
//             //     console.log("=== üì¶ API –í–Ü–î–ü–û–í–Ü–î–¨ /cars/brands ===");
//             //     console.log("res.data:", res.data);
//             //     console.log("–¢–∏–ø res.data:", typeof res.data);
//             //     if (Array.isArray(res.data)) {
//             //         console.log("–ü–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç:", res.data[0]);
//             //     }
//             //     setBrands(res.data || []);
//             // })
//             .catch((err) => console.error("‚ùå Error fetching brands:", err));
//     }, []);
//
//     // ‚úÖ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –±—Ä–µ–Ω–¥—É –ø—ñ–¥—Ç—è–≥—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ
//     const handleBrandChange = (brandId) => {
//         setSelectedBrand(brandId);
//         resetField("model");
//         setModels([]);
//
//         if (brandId) {
//             carService
//                 .getModels({brand: brandId})
//                 .then((res) => setModels(res.data || []))
//                 // .then((res) => {
//                 //     console.log("=== üì¶ API –í–Ü–î–ü–û–í–Ü–î–¨ /cars/models ===");
//                 //     console.log("–ü–æ–≤–Ω—ñ—Å—Ç—é res:", res);
//                 //     console.log("res.data:", res.data);
//                 //     console.log("typeof res.data:", typeof res.data);
//                 //     console.log("–ö–ª—é—á—ñ res.data:", Object.keys(res.data));
//                 //     console.log("–ú–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π (—è–∫—â–æ —î):", res.data.data || res.data);
//                 //
//                 //     setModels(res.data.data || res.data || []);
//                 // })
//                 .catch((err) => console.error("‚ùå Error fetching models:", err));
//         }
//     };
//
//     // ‚úÖ —Å–∞–±–º—ñ—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
//     const onSubmit = async (data) => {
//         if (showNewBrand || showNewModel) {
//             alert("‚ö† –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º –±—Ä–µ–Ω–¥–æ–º/–º–æ–¥–µ–ª–ª—é. –°–ø–µ—Ä—à—É –ø–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—é.");
//             return;
//         }
//
//         try {
//             await carService.createCar({
//                 brand: data.brand,
//                 model: data.model,
//                 description: data.description,
//                 original_price: data.original_price,
//                 original_currency: data.original_currency,
//                 location: data.location,
//             });
//
//             alert("‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–µ —É—Å–ø—ñ—à–Ω–æ!");
//             reset();
//             navigate("/cars");
//         } catch (e) {
//             console.error(e);
//             alert("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è!");
//         }
//     };
//
//     // ‚úÖ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –±—Ä–µ–Ω–¥
//     const reportBrand = (data) => {
//         if (!data.newBrand) {
//             alert("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É!");
//             return;
//         }
//         carService.reportMissingBrand({brand: data.newBrand});
//         resetField("newBrand");
//         setShowNewBrand(false);
//     };
//
//     // ‚úÖ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—é –º–æ–¥–µ–ª—å
//     const reportModel = (data) => {
//         if (!data.newModel) {
//             alert("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–æ–¥–µ–ª—ñ!");
//             return;
//         }
//         carService.reportMissingModel({brand: selectedBrand, model: data.newModel});
//         resetField("newModel");
//         setShowNewModel(false);
//     };
//
//     const inputClass =
//         "mt-1 px-3 py-2 rounded bg-gray-800 text-gray-100 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500";
//
//     return (
//         <div className="flex justify-center items-center min-h-[80vh]">
//             <div className="bg-gray-900 p-8 rounded-xl shadow-lg w-full max-w-lg">
//                 <h1 className="text-2xl font-bold text-gray-100 mb-6 text-center">
//                     –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
//                 </h1>
//
//                 <form onSubmit={handleSubmit(onSubmit)} className="grid gap-4">
//                     {/* === –ë—Ä–µ–Ω–¥ === */}
//                     <label className="flex flex-col text-gray-100">
//                         –ë—Ä–µ–Ω–¥
//                         <select
//                             {...register("brand", {required: !showNewBrand})}
//                             className={inputClass}
//                             // onChange={(e) => handleBrandChange(e.target.value)}
//                             onChange={(e) => {
//                                 const brandId = e.target.value;
//                                 // console.log("üëâ brandId —É handleBrandChange:", brandId, typeof brandId);
//                                 handleBrandChange(brandId);
//                             }}
//                             disabled={showNewBrand}
//                         >
//                             <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ --</option>
//                             {brands.map((b) => (
//                                 <option key={b.id} value={b.id}>
//                                     {b.brand}
//                                 </option>
//                             ))}
//                         </select>
//                         {errors.brand && (
//                             <span className="text-red-500 text-sm">–í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥</span>
//                         )}
//                     </label>
//
//                     {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥—É */}
//                     <button
//                         type="button"
//                         onClick={() => setShowNewBrand((prev) => !prev)}
//                         className="text-sm text-blue-400 hover:underline self-start"
//                     >
//                         {showNewBrand ? "‚úñ –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–ª–µ" : "–ù–µ–º–∞—î –º–æ–≥–æ –±—Ä–µ–Ω–¥—É?"}
//                     </button>
//
//                     {showNewBrand && (
//                         <div className="flex gap-2 items-center">
//                             <input
//                                 type="text"
//                                 {...register("newBrand")}
//                                 className={inputClass + " flex-1"}
//                                 placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –±—Ä–µ–Ω–¥"
//                             />
//                             <button
//                                 type="button"
//                                 onClick={handleSubmit(reportBrand)}
//                                 className="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-2 rounded"
//                             >
//                                 –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏
//                             </button>
//                         </div>
//                     )}
//
//                     {/* === –ú–æ–¥–µ–ª—å === */}
//                     {selectedBrand && !showNewBrand && (
//                         <>
//                             <label className="flex flex-col text-gray-100">
//                                 –ú–æ–¥–µ–ª—å
//                                 <select
//                                     {...register("model", {required: !showNewModel})}
//                                     className={inputClass}
//                                     disabled={showNewModel}
//                                 >
//                                     <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å --</option>
//                                     {models.map((m) => (
//                                         <option key={m.id} value={m.id}>
//                                             {m.model}
//                                         </option>
//                                     ))}
//                                 </select>
//                                 {errors.model && (
//                                     <span className="text-red-500 text-sm">–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å</span>
//                                 )}
//                             </label>
//
//                             <button
//                                 type="button"
//                                 onClick={() => setShowNewModel((prev) => !prev)}
//                                 className="text-sm text-blue-400 hover:underline self-start"
//                             >
//                                 {showNewModel ? "‚úñ –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–ª–µ" : "–ù–µ–º–∞—î –º–æ—î—ó –º–æ–¥–µ–ª—ñ?"}
//                             </button>
//
//                             {showNewModel && (
//                                 <div className="flex gap-2 items-center">
//                                     <input
//                                         type="text"
//                                         {...register("newModel")}
//                                         className={inputClass + " flex-1"}
//                                         placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–æ–¥–µ–ª—å"
//                                     />
//                                     <button
//                                         type="button"
//                                         onClick={handleSubmit(reportModel)}
//                                         className="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-2 rounded"
//                                     >
//                                         –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏
//                                     </button>
//                                 </div>
//                             )}
//                         </>
//                     )}
//
//                     {/* === –û–ø–∏—Å === */}
//                     <label className="flex flex-col text-gray-100">
//                         –û–ø–∏—Å
//                         <textarea
//                             {...register("description", {required: true})}
//                             className={inputClass}
//                             rows={4}
//                         />
//                         {errors.description && (
//                             <span className="text-red-500 text-sm">–ü–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ</span>
//                         )}
//                     </label>
//
//                     {/* === –¶—ñ–Ω–∞ === */}
//                     <label className="flex flex-col text-gray-100">
//                         –¶—ñ–Ω–∞
//                         <input
//                             type="number"
//                             step="0.01"
//                             {...register("original_price", {required: true})}
//                             className={inputClass}
//                         />
//                         {errors.original_price && (
//                             <span className="text-red-500 text-sm">–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É</span>
//                         )}
//                     </label>
//
//                     {/* === –í–∞–ª—é—Ç–∞ === */}
//                     <label className="flex flex-col text-gray-100">
//                         –í–∞–ª—é—Ç–∞
//                         <select
//                             {...register("original_currency", {required: true})}
//                             className={inputClass}
//                         >
//                             <option value="UAH">‚Ç¥ –ì—Ä–∏–≤–Ω—è</option>
//                             <option value="USD">$ –î–æ–ª–∞—Ä</option>
//                             <option value="EUR">‚Ç¨ –Ñ–≤—Ä–æ</option>
//                         </select>
//                     </label>
//
//                     {/* === –õ–æ–∫–∞—Ü—ñ—è === */}
//                     <label className="flex flex-col text-gray-100">
//                         –õ–æ–∫–∞—Ü—ñ—è
//                         <input
//                             type="text"
//                             {...register("location", {required: true})}
//                             className={inputClass}
//                         />
//                         {errors.location && (
//                             <span className="text-red-500 text-sm">–ü–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ</span>
//                         )}
//                     </label>
//
//                     <button
//                         type="submit"
//                         disabled={showNewBrand || showNewModel}
//                         className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 rounded shadow transition-colors disabled:opacity-50"
//                     >
//                         –°—Ç–≤–æ—Ä–∏—Ç–∏
//                     </button>
//                 </form>
//             </div>
//         </div>
//     );
// };
//
// export {CreateCarPosterPage};


// import React, { useEffect, useState } from "react";
// import { useForm } from "react-hook-form";
// import { carService } from "../services/carService";
// import { useNavigate } from "react-router-dom";
//
// const CreateCarPosterPage = () => {
//   const {
//     register,
//     handleSubmit,
//     watch,
//     reset,
//     formState: { errors },
//   } = useForm();
//
//   const navigate = useNavigate();
//
//   const [brands, setBrands] = useState([]);
//   const [models, setModels] = useState([]);
//   const [loading, setLoading] = useState(false);
//
//   // –¥–ª—è –ø–æ–∫–∞–∑—É —ñ–Ω–ø—É—Ç—ñ–≤
//   const [showNewBrand, setShowNewBrand] = useState(false);
//   const [showNewModel, setShowNewModel] = useState(false);
//
//   const selectedBrand = watch("brand");
//
//   useEffect(() => {
//     carService
//       .getBrands()
//       .then((res) => setBrands(res.data))
//       .catch((err) => console.error("‚ùå Error fetching brands:", err));
//   }, []);
//
//   useEffect(() => {
//     if (selectedBrand) {
//       carService
//         .getModels({ brand: selectedBrand })
//         .then((res) => setModels(res.data))
//         .catch((err) => console.error("‚ùå Error fetching models:", err));
//     } else {
//       setModels([]);
//     }
//   }, [selectedBrand]);
//
//   const onSubmit = async (data) => {
//     setLoading(true);
//     try {
//       await carService.createCar({
//         brand: data.brand,
//         model: data.model,
//         description: data.description,
//         original_price: data.price,
//         original_currency: data.currency,
//         location: data.location,
//       });
//
//       alert("‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!");
//       reset();
//       navigate("/cars");
//     } catch (err) {
//       console.error("‚ùå Error creating car:", err);
//       alert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è");
//     } finally {
//       setLoading(false);
//     }
//   };
//
//   const inputClass =
//     "mt-1 px-3 py-2 rounded bg-gray-800 text-gray-100 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500";
//
//   return (
//     <div className="flex justify-center items-center min-h-[80vh]">
//       <div className="bg-gray-900 p-8 rounded-xl shadow-lg w-full max-w-lg">
//         <h1 className="text-2xl font-bold text-gray-100 mb-6 text-center">
//           –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
//         </h1>
//
//         <form onSubmit={handleSubmit(onSubmit)} className="grid gap-4">
//           {/* –ë—Ä–µ–Ω–¥ */}
//           <label className="flex flex-col text-gray-100">
//             –ë—Ä–µ–Ω–¥
//             <select {...register("brand", { required: true })} className={inputClass}>
//               <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ --</option>
//               {brands.map((b) => (
//                 <option key={b.id} value={b.id}>
//                   {b.brand}
//                 </option>
//               ))}
//             </select>
//             {errors.brand && (
//               <span className="text-red-500 text-sm">–í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥</span>
//             )}
//           </label>
//
//           {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥—É */}
//           <button
//             type="button"
//             onClick={() => setShowNewBrand((prev) => !prev)}
//             className="text-sm text-blue-400 hover:underline self-start"
//           >
//             {showNewBrand ? "‚úñ –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–ª–µ" : "–ù–µ–º–∞—î –º–æ–≥–æ –±—Ä–µ–Ω–¥—É?"}
//           </button>
//
//           {showNewBrand && (
//             <label className="flex flex-col text-gray-100">
//               –ù–æ–≤–∏–π –±—Ä–µ–Ω–¥
//               <input
//                 type="text"
//                 {...register("newBrand")}
//                 className={inputClass}
//               />
//             </label>
//           )}
//
//           {/* –ú–æ–¥–µ–ª—å */}
//           {selectedBrand && (
//             <label className="flex flex-col text-gray-100">
//               –ú–æ–¥–µ–ª—å
//               <select {...register("model", { required: true })} className={inputClass}>
//                 <option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å --</option>
//                 {models.map((m) => (
//                   <option key={m.id} value={m.id}>
//                     {m.model}
//                   </option>
//                 ))}
//               </select>
//               {errors.model && (
//                 <span className="text-red-500 text-sm">–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å</span>
//               )}
//             </label>
//           )}
//
//           {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ */}
//           {selectedBrand && (
//             <button
//               type="button"
//               onClick={() => setShowNewModel((prev) => !prev)}
//               className="text-sm text-blue-400 hover:underline self-start"
//             >
//               {showNewModel ? "‚úñ –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–ª–µ" : "–ù–µ–º–∞—î –º–æ—î—ó –º–æ–¥–µ–ª—ñ?"}
//             </button>
//           )}
//
//           {showNewModel && (
//             <label className="flex flex-col text-gray-100">
//               –ù–æ–≤–∞ –º–æ–¥–µ–ª—å
//               <input
//                 type="text"
//                 {...register("newModel")}
//                 className={inputClass}
//               />
//             </label>
//           )}
//
//           {/* –û–ø–∏—Å */}
//           <label className="flex flex-col text-gray-100">
//             –û–ø–∏—Å
//             <textarea
//               {...register("description", { required: true })}
//               className={inputClass}
//               rows={4}
//             />
//             {errors.description && (
//               <span className="text-red-500 text-sm">–ü–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ</span>
//             )}
//           </label>
//
//           {/* –¶—ñ–Ω–∞ */}
//           <label className="flex flex-col text-gray-100">
//             –¶—ñ–Ω–∞
//             <input
//               type="number"
//               step="0.01"
//               {...register("price", { required: true })}
//               className={inputClass}
//             />
//             {errors.price && (
//               <span className="text-red-500 text-sm">–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É</span>
//             )}
//           </label>
//
//           {/* –í–∞–ª—é—Ç–∞ */}
//           <label className="flex flex-col text-gray-100">
//             –í–∞–ª—é—Ç–∞
//             <select {...register("currency", { required: true })} className={inputClass}>
//               <option value="UAH">‚Ç¥ –ì—Ä–∏–≤–Ω—è</option>
//               <option value="USD">$ –î–æ–ª–∞—Ä</option>
//               <option value="EUR">‚Ç¨ –Ñ–≤—Ä–æ</option>
//             </select>
//           </label>
//
//           {/* –õ–æ–∫–∞—Ü—ñ—è */}
//           <label className="flex flex-col text-gray-100">
//             –õ–æ–∫–∞—Ü—ñ—è
//             <input
//               type="text"
//               {...register("location", { required: true })}
//               className={inputClass}
//             />
//             {errors.location && (
//               <span className="text-red-500 text-sm">–ü–æ–ª–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ</span>
//             )}
//           </label>
//
//           <button
//             type="submit"
//             disabled={loading}
//             className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 rounded shadow transition-colors disabled:opacity-50"
//           >
//             {loading ? "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è..." : "–°—Ç–≤–æ—Ä–∏—Ç–∏"}
//           </button>
//         </form>
//       </div>
//     </div>
//   );
// };
//
// export { CreateCarPosterPage };


// import React, { useState } from "react";
// import { useForm } from "react-hook-form";
// import { carService } from "../services/carService"; // üîπ —Å—Ç–≤–æ—Ä–∏–º–æ –¥–∞–ª—ñ
// import { useNavigate } from "react-router-dom";
//
// const CreateCarPosterPage = () => {
//   const { register, handleSubmit } = useForm();
//   const [loading, setLoading] = useState(false);
//   const [errors, setErrors] = useState({});
//   const navigate = useNavigate();
//
//   const getFieldError = (field) => errors?.[field]?.[0] || null;
//
//   const inputClass = (field) =>
//     `mt-1 px-3 py-2 rounded bg-gray-800 text-gray-100 border focus:outline-none focus:ring-2 ${
//       getFieldError(field)
//         ? "border-red-500 focus:ring-red-500"
//         : "border-gray-700 focus:ring-blue-500"
//     }`;
//
//   const onSubmit = async (data) => {
//     setLoading(true);
//     setErrors({});
//     try {
//       await carService.createCar(data);
//       alert("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–µ ‚úÖ");
//       navigate("/my-cars"); // üîπ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
//     } catch (err) {
//       console.error("‚ùå CreateCarPoster error:", err);
//       setErrors(err.response?.data || { detail: "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞" });
//     } finally {
//       setLoading(false);
//     }
//   };
//
//   return (
//     <div className="flex justify-center items-center min-h-[80vh]">
//       <div className="bg-gray-900 p-8 rounded-xl shadow-lg w-full max-w-md">
//         <h1 className="text-2xl font-bold text-gray-100 mb-6 text-center">
//           –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
//         </h1>
//         <form onSubmit={handleSubmit(onSubmit)} className="grid gap-4">
//
//           {/* –ú–∞—Ä–∫–∞ */}
//           <label className="flex flex-col text-gray-100">
//             –ú–∞—Ä–∫–∞
//             <input
//               type="text"
//               {...register("brand", { required: true })}
//               className={inputClass("brand")}
//             />
//             {getFieldError("brand") && (
//               <span className="text-red-500 text-sm">{getFieldError("brand")}</span>
//             )}
//           </label>
//
//           {/* –ú–æ–¥–µ–ª—å */}
//           <label className="flex flex-col text-gray-100">
//             –ú–æ–¥–µ–ª—å
//             <input
//               type="text"
//               {...register("model", { required: true })}
//               className={inputClass("model")}
//             />
//             {getFieldError("model") && (
//               <span className="text-red-500 text-sm">{getFieldError("model")}</span>
//             )}
//           </label>
//
//           {/* –¶—ñ–Ω–∞ */}
//           <label className="flex flex-col text-gray-100">
//             –¶—ñ–Ω–∞
//             <input
//               type="number"
//               {...register("price", { required: true })}
//               className={inputClass("price")}
//             />
//             {getFieldError("price") && (
//               <span className="text-red-500 text-sm">{getFieldError("price")}</span>
//             )}
//           </label>
//
//           {/* –í–∞–ª—é—Ç–∞ */}
//           <label className="flex flex-col text-gray-100">
//             –í–∞–ª—é—Ç–∞
//             <select {...register("currency")} className={inputClass("currency")}>
//               <option value="UAH">‚Ç¥ –ì—Ä–∏–≤–Ω—è</option>
//               <option value="USD">$ –î–æ–ª–∞—Ä</option>
//               <option value="EUR">‚Ç¨ –Ñ–≤—Ä–æ</option>
//             </select>
//             {getFieldError("currency") && (
//               <span className="text-red-500 text-sm">{getFieldError("currency")}</span>
//             )}
//           </label>
//
//           {/* –õ–æ–∫–∞—Ü—ñ—è */}
//           <label className="flex flex-col text-gray-100">
//             –õ–æ–∫–∞—Ü—ñ—è
//             <input
//               type="text"
//               {...register("location", { required: true })}
//               className={inputClass("location")}
//             />
//             {getFieldError("location") && (
//               <span className="text-red-500 text-sm">{getFieldError("location")}</span>
//             )}
//           </label>
//
//           {/* –û–ø–∏—Å */}
//           <label className="flex flex-col text-gray-100">
//             –û–ø–∏—Å
//             <textarea
//               {...register("description")}
//               className={inputClass("description")}
//             />
//             {getFieldError("description") && (
//               <span className="text-red-500 text-sm">{getFieldError("description")}</span>
//             )}
//           </label>
//
//           {/* –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ */}
//           {errors.detail && (
//             <p className="text-red-500 text-sm text-center">{errors.detail}</p>
//           )}
//
//           <button
//             type="submit"
//             disabled={loading}
//             className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 rounded shadow transition-colors disabled:opacity-50"
//           >
//             {loading ? "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è..." : "–°—Ç–≤–æ—Ä–∏—Ç–∏"}
//           </button>
//         </form>
//       </div>
//     </div>
//   );
// };
//
// export { CreateCarPosterPage };