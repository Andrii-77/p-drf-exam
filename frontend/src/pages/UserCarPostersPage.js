import { useEffect, useState } from "react";
import { useSearchParams } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { carService } from "../services/carService";
import { PaginationComponent } from "../components/pagination-component/PaginationComponent";
import { CarPosterComponent } from "../components/car-poster-component/CarPosterComponent";

const UserCarPostersPage = () => {
  const { user } = useAuth();
  const [cars, setCars] = useState([]);
  const [totalPages, setTotalPages] = useState(1);
  const [query, setQuery] = useSearchParams({ page: "1" });

  const [status, setStatus] = useState("");
  const [brands, setBrands] = useState([]);
  const [models, setModels] = useState([]);
  const [selectedBrand, setSelectedBrand] = useState("");
  const [selectedModel, setSelectedModel] = useState("");
  const [sortOrder, setSortOrder] = useState("");

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [filtersChanged, setFiltersChanged] = useState(false);

  const page = query.get("page") || "1";

  // üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤
  useEffect(() => {
    const fetchBrands = async () => {
      try {
        const res = await carService.getBrands();
        setBrands(res.data);
      } catch (e) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –±—Ä–µ–Ω–¥—ñ–≤:", e);
      }
    };
    fetchBrands();
  }, []);

  // üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –∑–º—ñ–Ω—ñ –±—Ä–µ–Ω–¥—É
  useEffect(() => {
    const fetchModels = async () => {
      try {
        if (selectedBrand) {
          const res = await carService.getModels({ brand: selectedBrand });
          setModels(res.data);
        } else {
          const res = await carService.getModels();
          setModels(res.data);
        }
      } catch (e) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π:", e);
      }
    };
    fetchModels();
  }, [selectedBrand]);

  // üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  useEffect(() => {
    const fetchUserCars = async () => {
      if (!user?.id) return;

      if (filtersChanged && page !== "1") {
        setQuery({ page: "1" });
        setFiltersChanged(false);
        return;
      }

      setLoading(true);
      setError(null);

      try {
        const params = { page };

        if (status) params.status = status;
        if (selectedBrand) params.brand = selectedBrand;
        if (selectedModel) params.model = selectedModel;

        if (sortOrder === "asc") params.ordering = "price_usd";
        else if (sortOrder === "desc") params.ordering = "-price_usd";

        const res = await carService.getUserCars(user.id, params);

        setCars(res.data.data || []);
        setTotalPages(res.data.total_pages || 1);
      } catch (e) {
        if (e.response?.status === 404) {
          // üîπ –Ø–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è ‚Äî —Ü–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞
          console.warn("–ü–æ—Ä–æ–∂–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∞–±–æ –Ω–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤");
          setCars([]);
          setTotalPages(1);
        } else {
          console.error("‚ùå [Error loading user cars]", e);
          setError(e);
        }
      } finally {
        setLoading(false);
      }
    };

    fetchUserCars();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user, page, status, selectedBrand, selectedModel, sortOrder, filtersChanged]);

  // üîπ –°–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const resetFilters = () => {
    setSelectedBrand("");
    setSelectedModel("");
    setSortOrder("");
    setStatus("");
    setFiltersChanged(false);
    setQuery({ page: "1" });
  };

  return (
    <div className="space-y-8 bg-gray-900 min-h-screen py-8 px-4 text-gray-100">
      <h1 className="text-3xl font-semibold text-center mb-6 text-white">
        –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
      </h1>

      {/* –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –∑–≤–µ—Ä—Ö—É */}
      <div className="flex justify-center">
        <PaginationComponent currentPage={+page} totalPages={totalPages} />
      </div>

      {/* –§—ñ–ª—å—Ç—Ä–∏ */}
      <div className="flex flex-col md:flex-row flex-wrap justify-center gap-4 items-start md:items-end bg-gray-800 p-5 rounded-2xl shadow-md border border-gray-700">
        {/* –°—Ç–∞—Ç—É—Å */}
        <div className="flex flex-col">
          <label className="text-gray-300 font-medium">–§—ñ–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:</label>
          <select
            value={status}
            onChange={(e) => {
              setStatus(e.target.value);
              setFiltersChanged(true);
            }}
            className="bg-gray-700 border border-gray-600 text-gray-100 px-3 py-2 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          >
            <option value="">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
            <option value="draft">–ß–µ—Ä–Ω–µ—Ç–∫–∞</option>
            <option value="active">–ê–∫—Ç–∏–≤–Ω–µ</option>
            <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω–µ</option>
          </select>
        </div>

        {/* –ë—Ä–µ–Ω–¥ */}
        <div className="flex flex-col">
          <label className="text-gray-300 font-medium">–ë—Ä–µ–Ω–¥:</label>
          <select
            value={selectedBrand}
            onChange={(e) => {
              setSelectedBrand(e.target.value);
              setSelectedModel("");
              setFiltersChanged(true);
            }}
            className="bg-gray-700 border border-gray-600 text-gray-100 px-3 py-2 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          >
            <option value="">–£—Å—ñ –±—Ä–µ–Ω–¥–∏</option>
            {brands.map((brand) => (
              <option key={brand.id} value={brand.id}>
                {brand.brand}
              </option>
            ))}
          </select>
        </div>

        {/* –ú–æ–¥–µ–ª—å */}
        <div className="flex flex-col">
          <label className="text-gray-300 font-medium">–ú–æ–¥–µ–ª—å:</label>
          <select
            value={selectedModel}
            onChange={(e) => {
              setSelectedModel(e.target.value);
              setFiltersChanged(true);
            }}
            disabled={!selectedBrand}
            className="bg-gray-700 border border-gray-600 text-gray-100 px-3 py-2 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition disabled:bg-gray-600 disabled:cursor-not-allowed"
          >
            <option value="">–£—Å—ñ –º–æ–¥–µ–ª—ñ</option>
            {models.map((model) => (
              <option key={model.id} value={model.id}>
                {model.model}
              </option>
            ))}
          </select>
        </div>

        {/* –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è */}
        <div className="flex flex-col">
          <label className="text-gray-300 font-medium">–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ —Ü—ñ–Ω–æ—é:</label>
          <select
            value={sortOrder}
            onChange={(e) => {
              setSortOrder(e.target.value);
              setFiltersChanged(true);
            }}
            className="bg-gray-700 border border-gray-600 text-gray-100 px-3 py-2 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          >
            <option value="">–ë–µ–∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</option>
            <option value="asc">–í—ñ–¥ –¥–µ—à–µ–≤—à–∏—Ö –¥–æ –¥–æ—Ä–æ–∂—á–∏—Ö</option>
            <option value="desc">–í—ñ–¥ –¥–æ—Ä–æ–∂—á–∏—Ö –¥–æ –¥–µ—à–µ–≤—à–∏—Ö</option>
          </select>
        </div>

        {/* –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ */}
        <div className="flex items-center">
          <button
            onClick={resetFilters}
            className="bg-gray-700 text-gray-200 px-4 py-2 rounded-xl shadow hover:bg-gray-600 transition"
          >
            –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
          </button>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ */}
      <div className="flex flex-col items-center gap-6">
        {loading ? (
          <div className="text-gray-400 animate-pulse">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
        ) : error ? (
          <p className="text-red-400">–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–≤—Ç–æ.</p>
        ) : cars.length > 0 ? (
          cars.map((car) => (
            <div key={car.id} className="w-full max-w-xl">
              <CarPosterComponent car={car} role={user?.role} />
            </div>
          ))
        ) : (
          <p className="text-gray-400 text-center mt-4">
            –ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
          </p>
        )}
      </div>

      {/* –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –∑–Ω–∏–∑—É */}
      <div className="flex justify-center">
        <PaginationComponent currentPage={+page} totalPages={totalPages} />
      </div>
    </div>
  );
};

export { UserCarPostersPage };