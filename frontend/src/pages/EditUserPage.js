import React, {useEffect, useState} from "react";
import {useForm} from "react-hook-form";
import {useParams, useNavigate} from "react-router-dom";
import {userService} from "../services/userService";
import {useAuth} from "../context/AuthContext";

const EditUserPage = () => {
    const {id} = useParams();
    const navigate = useNavigate();
    const {user: currentUser} = useAuth();

    const {
        register,
        handleSubmit,
        setValue,
        watch,
        formState: {errors},
    } = useForm();

    const [userData, setUserData] = useState(null);
    const [backendError, setBackendError] = useState(null);
    const [successMessage, setSuccessMessage] = useState(null);
    const [loading, setLoading] = useState(true);

    const inputClass =
        "mt-1 px-3 py-2 rounded-lg bg-gray-800 text-gray-100 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500";

    // === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ===
    useEffect(() => {
        if (!id) return;

        const fetchUser = async () => {
            try {
                const {data} = await userService.getById(id);
                setUserData(data);

                setValue("email", data.email || "");
                setValue("role", data.role || "");
                setValue("account_type", data.account_type || "basic");
                setValue("is_active", data.is_active);
                if (data.profile) {
                    setValue("name", data.profile.name || "");
                    setValue("surname", data.profile.surname || "");
                    setValue("phone_number", data.profile.phone_number || "");
                }
            } catch (err) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", err);
                setBackendError({
                    detail: "‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
                });
            } finally {
                setLoading(false);
            }
        };

        fetchUser();
    }, [id, setValue]);

    // === –°–∞–±–º—ñ—Ç —Ñ–æ—Ä–º–∏ ===
    const onSubmit = async (data) => {
        try {
            setBackendError(null);
            setSuccessMessage(null);

            const preparedData = {
                email: data.email,
                role: data.role,
                account_type: data.account_type,
                is_active: data.is_active,
                profile: {
                    name: data.name,
                    surname: data.surname,
                    phone_number: data.phone_number,
                },
            };

            const res = await userService.update(id, preparedData);
            const message = res.data?.message || "‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.";
            setSuccessMessage(message);
        } catch (err) {
            if (err.response?.data) {
                setBackendError(err.response.data);
            } else {
                setBackendError({
                    detail: "‚ö† –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.",
                });
            }
        }
    };

    // ‚úÖ –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É—Å–ø—ñ—Ö—É ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const handleCloseSuccess = () => {
        setSuccessMessage(null);
        navigate(`/users/${id}`, {state: {fromEdit: true}});
    };

    if (loading) {
        return <p className="text-gray-400 text-center mt-10">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;
    }

    if (!userData) {
        return (
            <p className="text-red-400 text-center mt-10">
                –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
            </p>
        );
    }

    // === –û–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
    const isManagerOrAdmin =
        currentUser?.role === "manager" || currentUser?.role === "admin";
    const isSelf = parseInt(currentUser?.id) === parseInt(id);

    // === –†–æ–ª—ñ –¥–ª—è –≤–∏–±–æ—Ä—É ===
    const availableRoles = isManagerOrAdmin
        ? ["buyer", "seller", "manager", "admin"]
        : ["buyer", "seller"];

    return (
        <div className="flex justify-center items-center min-h-[80vh] px-4">
            <div className="bg-gray-900 p-8 rounded-xl shadow-lg w-full max-w-lg">
                <h1 className="text-2xl font-bold text-gray-100 mb-6 text-center">
                    ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                </h1>

                {/* ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—Ö—É */}
                {successMessage && (
                    <div className="mb-4 p-3 rounded bg-green-800 text-green-200 relative">
                        {successMessage}
                        <button
                            onClick={handleCloseSuccess}
                            className="absolute top-1 right-2 hover:text-white"
                        >
                            ‚úñ
                        </button>
                    </div>
                )}

                {/* ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ */}
                {backendError && (
                    <div className="mb-4 p-3 rounded bg-red-800 text-red-200 text-sm relative">
                        {backendError.detail && <p>{backendError.detail}</p>}
                        {Object.keys(backendError).map(
                            (field) =>
                                field !== "detail" && (
                                    <p key={field}>
                                        ‚ö† {field}: {backendError[field]}
                                    </p>
                                )
                        )}
                        <button
                            onClick={() => setBackendError(null)}
                            className="absolute top-1 right-2 hover:text-white"
                        >
                            ‚úñ
                        </button>
                    </div>
                )}

                {/* === –§–æ—Ä–º–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è === */}
                <form onSubmit={handleSubmit(onSubmit)} className="grid gap-4">
                    {/* Email */}
                    <label className="flex flex-col text-gray-100">
                        Email
                        <input
                            type="email"
                            {...register("email", {required: true})}
                            className={inputClass}
                        />
                        {errors.email && (
                            <span className="text-red-500 text-sm">
                –í–∫–∞–∂—ñ—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É
              </span>
                        )}
                    </label>

                    {/* –†–æ–ª—å */}
                    <label className="flex flex-col text-gray-100">
                        –†–æ–ª—å
                        <select {...register("role", {required: true})} className={inputClass}>
                            {availableRoles.map((r) => (
                                <option key={r} value={r}>
                                    {r}
                                </option>
                            ))}
                        </select>
                    </label>

                    {/* –¢–∏–ø –∞–∫–∞—É–Ω—Ç—É ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –ª–∏—à–µ, —è–∫—â–æ —Ä–æ–ª—å = seller */}
                    {watch("role") === "seller" && (
                        <label className="flex flex-col text-gray-100">
                            –¢–∏–ø –∞–∫–∞—É–Ω—Ç—É
                            <select
                                {...register("account_type")}
                                className={inputClass}
                                disabled={!isManagerOrAdmin}
                            >
                                <option value="basic">–ë–∞–∑–æ–≤–∏–π</option>
                                <option value="premium">–ü—Ä–µ–º—ñ—É–º</option>
                            </select>
                        </label>
                    )}

                    {/* –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å */}
                    <label className="flex flex-col text-gray-100">
                        –ê–∫—Ç–∏–≤–Ω–∏–π
                        <select
                            {...register("is_active")}
                            className={inputClass}
                            disabled={!isManagerOrAdmin}
                        >
                            <option value={true}>–¢–∞–∫</option>
                            <option value={false}>–ù—ñ</option>
                        </select>
                    </label>

                    {/* –Ü–º‚Äô—è */}
                    <label className="flex flex-col text-gray-100">
                        –Ü–º‚Äô—è
                        <input type="text" {...register("name")} className={inputClass}/>
                    </label>

                    {/* –ü—Ä—ñ–∑–≤–∏—â–µ */}
                    <label className="flex flex-col text-gray-100">
                        –ü—Ä—ñ–∑–≤–∏—â–µ
                        <input type="text" {...register("surname")} className={inputClass}/>
                    </label>

                    {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
                    <label className="flex flex-col text-gray-100">
                        –¢–µ–ª–µ—Ñ–æ–Ω
                        <input type="text" {...register("phone_number")} className={inputClass}/>
                    </label>

                    {/* === –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è === */}
                    <button
                        type="submit"
                        className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 rounded shadow transition-colors"
                    >
                        üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
                    </button>

                    {/* === –ö–Ω–æ–ø–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è (–∑–∞–≥–ª—É—à–∫–∞) === */}
                    {isSelf && (
                        <button
                            type="button"
                            onClick={() => alert("üîê –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ")}
                            className="bg-gray-700 hover:bg-gray-600 text-gray-100 font-semibold py-2 rounded shadow transition-colors"
                        >
                            üîë –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å
                        </button>
                    )}
                </form>
            </div>
        </div>
    );
};

export {EditUserPage};


// // 20251030 —Ü–µ –±—É–ª–∞ –∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É.
// import React from "react";
// import { useParams, useNavigate, useLocation } from "react-router-dom";
//
// const EditUserPage = () => {
//   const { id } = useParams();
//   const navigate = useNavigate();
//   const location = useLocation();
//
//   return (
//     <div className="p-6 min-h-[80vh] bg-gray-800 text-gray-100 flex justify-center">
//       <div className="bg-gray-900 p-8 rounded-2xl shadow-lg w-full max-w-2xl space-y-6">
//         <h1 className="text-2xl font-bold text-center">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ #{id}</h1>
//
//         <p className="text-gray-300">
//           –¶–µ —Ç–∏–º—á–∞—Å–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è. –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É –∑–º—ñ–Ω–∏ –ø—Ä–æ—Ñ—ñ–ª—é/—Ä–æ–ª—ñ/—Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
//         </p>
//
//         <div className="flex justify-between mt-6">
//           <button
//             onClick={() => navigate(-1)}
//             className="bg-gray-700 hover:bg-gray-600 text-gray-100 px-4 py-2 rounded"
//           >
//             –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å
//           </button>
//
//           <button
//             onClick={() => {
//               // —Ç–∏–º—á–∞—Å–æ–≤–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ ‚Äî –ø—ñ—Å–ª—è "–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è" –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–µ—Ç–∞–ª–µ–π
//               navigate(`/users/${id}`);
//             }}
//             className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
//           >
//             –ó–±–µ—Ä–µ–≥—Ç–∏ (—Å–∏–º—É–ª—è—Ü—ñ—è)
//           </button>
//         </div>
//       </div>
//     </div>
//   );
// };
//
// export { EditUserPage };